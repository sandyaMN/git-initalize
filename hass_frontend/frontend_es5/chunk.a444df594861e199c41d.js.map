{"version":3,"sources":["webpack:///./src/components/dialog/ha-iron-focusables-helper.js","webpack:///./src/components/dialog/ha-paper-dialog.ts","webpack:///./src/components/ha-switch.ts","webpack:///./src/dialogs/confirmation/dialog-confirmation.ts"],"names":["HaIronFocusablesHelper","getTabbableNodes","node","result","this","_collectTabbableNodes","IronFocusablesHelper","_sortByTabIndex","nodeType","Node","ELEMENT_NODE","_isVisible","children","element","tabIndex","_normalizedTabIndex","needsSort","push","localName","dom","getDistributedNodes","shadowRoot","root","i","length","paperDialogClass","customElements","get","haTabFixBehaviorImpl","_focusableNodes","HaPaperDialog","_mixinBehaviors","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","apply","arguments","_inherits","mixinBehaviors","define","MwcSwitch","_decorate","customElement","_initialize","_MwcSwitch","HaSwitch","_MwcSwitch2","_getPrototypeOf2","_this","_len","args","Array","_key","call","concat","_assertThisInitialized","F","d","kind","decorators","query","key","value","_get","prototype","style","setProperty","classList","toggle","Boolean","_slot","assignedNodes","static","css","_templateObject","property","params","regeneratorRuntime","async","_context","prev","next","_params","stop","html","_templateObject2","_openedChanged","title","hass","localize","text","_dismiss","cancelBtnText","_confirm","confirmBtnText","_context2","undefined","_context3","confirm","ev","detail","haStyleDialog","_templateObject3","LitElement"],"mappings":"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","file":"chunk.a444df594861e199c41d.js","sourcesContent":["/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n/*\n  Fixes issue with not using shadow dom properly in iron-overlay-behavior/icon-focusables-helper.js\n*/\nimport { dom } from \"@polymer/polymer/lib/legacy/polymer.dom.js\";\n\nimport { IronFocusablesHelper } from \"@polymer/iron-overlay-behavior/iron-focusables-helper.js\";\n\nexport const HaIronFocusablesHelper = {\n  /**\n   * Returns a sorted array of tabbable nodes, including the root node.\n   * It searches the tabbable nodes in the light and shadow dom of the chidren,\n   * sorting the result by tabindex.\n   * @param {!Node} node\n   * @return {!Array<!HTMLElement>}\n   */\n  getTabbableNodes: function(node) {\n    var result = [];\n    // If there is at least one element with tabindex > 0, we need to sort\n    // the final array by tabindex.\n    var needsSortByTabIndex = this._collectTabbableNodes(node, result);\n    if (needsSortByTabIndex) {\n      return IronFocusablesHelper._sortByTabIndex(result);\n    }\n    return result;\n  },\n\n  /**\n   * Searches for nodes that are tabbable and adds them to the `result` array.\n   * Returns if the `result` array needs to be sorted by tabindex.\n   * @param {!Node} node The starting point for the search; added to `result`\n   * if tabbable.\n   * @param {!Array<!HTMLElement>} result\n   * @return {boolean}\n   * @private\n   */\n  _collectTabbableNodes: function(node, result) {\n    // If not an element or not visible, no need to explore children.\n    if (\n      node.nodeType !== Node.ELEMENT_NODE ||\n      !IronFocusablesHelper._isVisible(node)\n    ) {\n      return false;\n    }\n    var element = /** @type {!HTMLElement} */ (node);\n    var tabIndex = IronFocusablesHelper._normalizedTabIndex(element);\n    var needsSort = tabIndex > 0;\n    if (tabIndex >= 0) {\n      result.push(element);\n    }\n\n    // In ShadowDOM v1, tab order is affected by the order of distrubution.\n    // E.g. getTabbableNodes(#root) in ShadowDOM v1 should return [#A, #B];\n    // in ShadowDOM v0 tab order is not affected by the distrubution order,\n    // in fact getTabbableNodes(#root) returns [#B, #A].\n    //  <div id=\"root\">\n    //   <!-- shadow -->\n    //     <slot name=\"a\">\n    //     <slot name=\"b\">\n    //   <!-- /shadow -->\n    //   <input id=\"A\" slot=\"a\">\n    //   <input id=\"B\" slot=\"b\" tabindex=\"1\">\n    //  </div>\n    // TODO(valdrin) support ShadowDOM v1 when upgrading to Polymer v2.0.\n    var children;\n    if (element.localName === \"content\" || element.localName === \"slot\") {\n      children = dom(element).getDistributedNodes();\n    } else {\n      // /////////////////////////\n      // Use shadow root if possible, will check for distributed nodes.\n      // THIS IS THE CHANGED LINE\n      children = dom(element.shadowRoot || element.root || element).children;\n      // /////////////////////////\n    }\n    for (var i = 0; i < children.length; i++) {\n      // Ensure method is always invoked to collect tabbable children.\n      needsSort = this._collectTabbableNodes(children[i], result) || needsSort;\n    }\n    return needsSort;\n  },\n};\n","import \"@polymer/paper-dialog/paper-dialog\";\nimport { mixinBehaviors } from \"@polymer/polymer/lib/legacy/class\";\nimport { HaIronFocusablesHelper } from \"./ha-iron-focusables-helper.js\";\n// tslint:disable-next-line\nimport { PaperDialogElement } from \"@polymer/paper-dialog/paper-dialog\";\n\nconst paperDialogClass = customElements.get(\"paper-dialog\");\n\n// behavior that will override existing iron-overlay-behavior and call the fixed implementation\nconst haTabFixBehaviorImpl = {\n  get _focusableNodes() {\n    return HaIronFocusablesHelper.getTabbableNodes(this);\n  },\n};\n\n// paper-dialog that uses the haTabFixBehaviorImpl behvaior\n// export class HaPaperDialog extends paperDialogClass {}\n// @ts-ignore\nexport class HaPaperDialog\n  extends mixinBehaviors([haTabFixBehaviorImpl], paperDialogClass)\n  implements PaperDialogElement {}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-paper-dialog\": HaPaperDialog;\n  }\n}\ncustomElements.define(\"ha-paper-dialog\", HaPaperDialog);\n","import { customElement, CSSResult, css, query } from \"lit-element\";\nimport \"@material/mwc-switch\";\nimport { style } from \"@material/mwc-switch/mwc-switch-css\";\n// tslint:disable-next-line\nimport { Switch } from \"@material/mwc-switch\";\nimport { Constructor } from \"../types\";\n// tslint:disable-next-line\nconst MwcSwitch = customElements.get(\"mwc-switch\") as Constructor<Switch>;\n\n@customElement(\"ha-switch\")\nexport class HaSwitch extends MwcSwitch {\n  @query(\"slot\") private _slot!: HTMLSlotElement;\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.style.setProperty(\n      \"--mdc-theme-secondary\",\n      \"var(--switch-checked-color)\"\n    );\n    this.classList.toggle(\n      \"slotted\",\n      Boolean(this._slot.assignedNodes().length)\n    );\n  }\n\n  protected static get styles(): CSSResult[] {\n    return [\n      style,\n      css`\n        :host {\n          display: flex;\n          flex-direction: row;\n          align-items: center;\n        }\n        .mdc-switch.mdc-switch--checked .mdc-switch__thumb {\n          background-color: var(--switch-checked-button-color);\n          border-color: var(--switch-checked-button-color);\n        }\n        .mdc-switch.mdc-switch--checked .mdc-switch__track {\n          background-color: var(--switch-checked-track-color);\n          border-color: var(--switch-checked-track-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n          background-color: var(--switch-unchecked-button-color);\n          border-color: var(--switch-unchecked-button-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n          background-color: var(--switch-unchecked-track-color);\n          border-color: var(--switch-unchecked-track-color);\n        }\n        :host(.slotted) .mdc-switch {\n          margin-right: 24px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-switch\": HaSwitch;\n  }\n}\n","import {\n  LitElement,\n  html,\n  css,\n  CSSResult,\n  TemplateResult,\n  customElement,\n  property,\n} from \"lit-element\";\nimport \"@polymer/paper-dialog-scrollable/paper-dialog-scrollable\";\nimport \"@polymer/paper-input/paper-input\";\n\nimport \"../../components/dialog/ha-paper-dialog\";\nimport \"../../components/ha-switch\";\n\nimport { HomeAssistant } from \"../../types\";\nimport { ConfirmationDialogParams } from \"./show-dialog-confirmation\";\nimport { PolymerChangedEvent } from \"../../polymer-types\";\nimport { haStyleDialog } from \"../../resources/styles\";\n\n@customElement(\"dialog-confirmation\")\nclass DialogConfirmation extends LitElement {\n  @property() public hass!: HomeAssistant;\n  @property() private _params?: ConfirmationDialogParams;\n\n  public async showDialog(params: ConfirmationDialogParams): Promise<void> {\n    this._params = params;\n  }\n\n  protected render(): TemplateResult | void {\n    if (!this._params) {\n      return html``;\n    }\n\n    return html`\n      <ha-paper-dialog\n        with-backdrop\n        opened\n        modal\n        @opened-changed=\"${this._openedChanged}\"\n      >\n        <h2>\n          ${this._params.title\n            ? this._params.title\n            : this.hass.localize(\"ui.dialogs.confirmation.title\")}\n        </h2>\n        <paper-dialog-scrollable>\n          <p>${this._params.text}</p>\n        </paper-dialog-scrollable>\n        <div class=\"paper-dialog-buttons\">\n          <mwc-button @click=\"${this._dismiss}\">\n            ${this._params.cancelBtnText\n              ? this._params.cancelBtnText\n              : this.hass.localize(\"ui.dialogs.confirmation.cancel\")}\n          </mwc-button>\n          <mwc-button @click=\"${this._confirm}\">\n            ${this._params.confirmBtnText\n              ? this._params.confirmBtnText\n              : this.hass.localize(\"ui.dialogs.confirmation.ok\")}\n          </mwc-button>\n        </div>\n      </ha-paper-dialog>\n    `;\n  }\n\n  private async _dismiss(): Promise<void> {\n    this._params = undefined;\n  }\n\n  private async _confirm(): Promise<void> {\n    this._params!.confirm();\n    this._dismiss();\n  }\n\n  private _openedChanged(ev: PolymerChangedEvent<boolean>): void {\n    if (!(ev.detail as any).value) {\n      this._params = undefined;\n    }\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      haStyleDialog,\n      css`\n        ha-paper-dialog {\n          min-width: 400px;\n          max-width: 500px;\n        }\n        @media (max-width: 400px) {\n          ha-paper-dialog {\n            min-width: initial;\n          }\n        }\n        p {\n          margin: 0;\n          padding-top: 6px;\n          padding-bottom: 24px;\n          color: var(--primary-text-color);\n        }\n        .secondary {\n          color: var(--secondary-text-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-confirmation\": DialogConfirmation;\n  }\n}\n"],"sourceRoot":""}