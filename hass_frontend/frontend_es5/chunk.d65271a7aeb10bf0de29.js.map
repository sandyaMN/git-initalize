{"version":3,"sources":["webpack:///../src/error.js","webpack:///../node_modules/kind-of/index.js","webpack:///../src/constants.js","webpack:///../src/utils.js","webpack:///../src/kinds.js","webpack:///../src/types.js","webpack:///../src/superstruct.js","webpack:///../src/index.js"],"names":["StructError","attrs","_this","_classCallCheck","this","message","data","path","value","reason","type","_attrs$errors","errors","length","push","Error","captureStackTrace","constructor","stack","TypeError","JSON","toString","Object","prototype","kindOf","val","_typeof","ctorName","Array","isArray","isBuffer","callee","err","indexOf","isArguments","Date","toDateString","getDate","setDate","isDate","stackTraceLimit","isError","RegExp","flags","ignoreCase","multiline","global","isRegexp","next","isGeneratorObj","call","slice","toLowerCase","replace","name","IS_STRUCT","KIND","isStruct","resolveDefaults","defaults","Kind","validate","any","schema","defaults$$1","options","tuple","list","func","object","required","union","intersection","scalar","optional","concat","en","map","s","e","String","join","arguments","undefined","isValid","result","failure","_extends","array","element","_array$validate2","_slicedToArray","error","ret","_loop3","i","v","_element$validate2","r","forEach","singleE","first","obj","ks","properties","key","kind","valueKeys","propertiesKeys","Set","_kind$validate4","_e2","fn","types","_kind$validate8","kinds","k","Math","_loop5","_e3","_kind$validate10","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","_k2$validate2","t","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_t$validate2","Kinds","keys","values","resolved","_loop","_k","_keys$validate2","_values$validate2","e2","r2","_loop2","_key","_kind$validate2","struct","_loop4","_key2","_kind$validate6","createSchema","_schema$validate2","Types","superstruct","config","Struct","defineProperty","assert","_kind$validate12","test","_kind$validate16","TYPES","isNaN"],"mappings":"m1EAMAA,mCASEC,GAAmB,IAAAC,EAAAC,EAAAC,KAAAJ,WACXK,EAAUL,SAAhBC,+BACAI,kDAFiB,IAIXC,EAANL,EAAMK,KAAAC,EAANN,EAAMM,KAAAC,EAANP,EAAMO,MAAAC,EAANR,EAAMQ,OAAAC,EAANT,EAAMS,KAJWC,EAIjBV,EAAyCW,cAJxB,IAAAD,EAIX,GAJWA,EAAA,SAKjBL,SACAC,SACAC,UACAC,WACAC,SACAE,SAEKA,EAALC,UACEC,WAGEC,MAAJC,wBACEA,uBAA8Bd,EAA9Be,eAEAC,OAAa,IAAAH,OAAbG,MAnBehB,gPATrBiB,gDACElB,GAAqB,IACbS,EAANT,EAAMS,KAAAH,EAANN,EAAMM,KAAAC,EAANP,EAAMO,YACAH,oCAAwCK,EAAxCL,YACJE,yBAAwBA,OAAxBA,UAA6C,GADzCF,0BAEae,eAFnBZ,GAAMH,mDCTNgB,EAAWC,OAAOC,UAAUF,SAEhCG,EAAiB,SAAgBC,GAC/B,QAAY,IAARA,EAAgB,MAAO,YAC3B,GAAY,OAARA,EAAc,MAAO,OAEzB,IAAIf,EAAIgB,EAAUD,GAClB,GAAa,YAATf,EAAoB,MAAO,UAC/B,GAAa,WAATA,EAAmB,MAAO,SAC9B,GAAa,WAATA,EAAmB,MAAO,SAC9B,GAAa,WAATA,EAAmB,MAAO,SAC9B,GAAa,aAATA,EACF,MAoFwB,sBAAnBiB,EApFgBF,GAAO,oBAAsB,WAGpD,GAwDF,SAAiBA,GACf,OAAIG,MAAMC,QAAgBD,MAAMC,QAAQJ,GACjCA,aAAeG,MA1DlBC,CAAQJ,GAAM,MAAO,QACzB,GA2GF,SAAkBA,GAChB,GAAIA,EAAIR,aAAmD,mBAA7BQ,EAAIR,YAAYa,SAC5C,OAAOL,EAAIR,YAAYa,SAASL,GAElC,OAAO,EA/GHK,CAASL,GAAM,MAAO,SAC1B,GAwFF,SAAqBA,GACnB,IACE,GAA0B,iBAAfA,EAAIZ,QAA6C,mBAAfY,EAAIM,OAC/C,OAAO,EAET,MAAOC,GACP,IAAuC,IAAnCA,EAAI3B,QAAQ4B,QAAQ,UACtB,OAAO,EAGX,OAAO,EAlGHC,CAAYT,GAAM,MAAO,YAC7B,GA8DF,SAAgBA,GACd,OAAIA,aAAeU,MACgB,mBAArBV,EAAIW,cACU,mBAAhBX,EAAIY,SACY,mBAAhBZ,EAAIa,QAlEZC,CAAOd,GAAM,MAAO,OACxB,GAyDF,SAAiBA,GACf,OAAOA,aAAeV,OAAiC,iBAAhBU,EAAIpB,SAAwBoB,EAAIR,aAA0D,iBAApCQ,EAAIR,YAAYuB,gBA1DzGC,CAAQhB,GAAM,MAAO,QACzB,GAmEF,SAAkBA,GAChB,OAAIA,aAAeiB,QACS,iBAAdjB,EAAIkB,OACa,kBAAnBlB,EAAImB,YACc,kBAAlBnB,EAAIoB,WACW,kBAAfpB,EAAIqB,OAxEZC,CAAStB,GAAM,MAAO,SAE1B,OAAQE,EAASF,IACf,IAAK,SAAU,MAAO,SACtB,IAAK,UAAW,MAAO,UAGvB,IAAK,UAAW,MAAO,UACvB,IAAK,UAAW,MAAO,UACvB,IAAK,MAAO,MAAO,MACnB,IAAK,MAAO,MAAO,MAGnB,IAAK,YAAa,MAAO,YACzB,IAAK,aAAc,MAAO,aAC1B,IAAK,oBAAqB,MAAO,oBAGjC,IAAK,aAAc,MAAO,aAC1B,IAAK,cAAe,MAAO,cAG3B,IAAK,aAAc,MAAO,aAC1B,IAAK,cAAe,MAAO,cAC3B,IAAK,eAAgB,MAAO,eAC5B,IAAK,eAAgB,MAAO,eAG9B,GAmDF,SAAwBA,GACtB,MAA4B,mBAAdA,EAAG,OACU,mBAAfA,EAAG,QACU,mBAAbA,EAAIuB,KAtDZC,CAAexB,GACjB,MAAO,YAKT,OADAf,EAAOW,EAAS6B,KAAKzB,IAEnB,IAAK,kBAAmB,MAAO,SAE/B,IAAK,wBAAyB,MAAO,cACrC,IAAK,wBAAyB,MAAO,cACrC,IAAK,2BAA4B,MAAO,iBACxC,IAAK,0BAA2B,MAAO,gBAIzC,OAAOf,EAAKyC,MAAM,GAAI,GAAGC,cAAcC,QAAQ,MAAO,KAGxD,SAAS1B,EAASF,GAChB,OAAOA,EAAIR,YAAcQ,EAAIR,YAAYqC,KAAO,KC9DlD,IAAMC,EAAN,iBAQMC,EAAN,eCLO,SAAAC,EAAAjD,YACKA,IAASA,EAAnB+C,IAWK,SAAAG,EAAAC,EAAAnD,SACE,mBAAAmD,EAAiCA,EAAjCnD,GAAPmD,0KCXFC,aACEN,EAAA5C,EAAAmD,GAAkC1D,EAAAC,KAAAwD,QAChCN,YACA5C,YACAmD,YAYJ,SAAAC,EAAAC,EAAAC,EAAAC,MACMR,EAAJM,UACSA,EAAPP,MAGEO,aAAJH,SACEG,SAGMvC,EAARuC,QACE,eACSA,WACHG,MADGH,GAEHI,MAFJF,OAKF,kBACSG,MAAPH,OAGF,gBACSI,MAAPJ,OAGF,aAEEvD,EADI4D,GAAJ,KAGIP,WAAJ,UACE,IACSA,WAAT,IAGEA,WAAJ,OAESQ,EADSR,QAAhB,aACOQ,EAAPN,QACK,GAAIF,WAAJ,KAA0B,GAExBS,EADST,QAAhB,YACOS,EAAPP,UAEOQ,MAAPR,UAGFK,MACSI,WAAPT,IAGFvD,QASI,IAAAK,MAAA,mBAAA4D,OAANZ,IA2FJ,SAAAa,EAAAb,EAAAC,EAAAC,MACE,UAAIzC,WAMM,IAAAT,MAAA,mBAAA4D,OAANZ,QAKErD,EAAOqD,EAAAc,IACNC,uBAEM1D,eAAP0D,GACA,MAAAC,UACOC,OAAPF,MALOG,KAAb,cAgBO,IAAArB,EAjBP,OAiBOlD,EANU,WAAuC,IAAtCF,EAAsC0E,UAAArE,OAAA,QAAAsE,IAAAD,UAAA,GAAAA,UAAA,GAA9BxB,EAATM,UACRD,cACH,MAAAoB,EADGpB,GAEH,CAAC,CAAEzD,KAAFE,EAAeD,KAAf,GAAyBC,QAAOE,WA4BzC,SAAA0D,EAAAL,EAAAC,EAAAC,MACE,aAAIzC,WAMM,IAAAT,MAAA,mBAAA4D,OAANZ,WA0CG,IAAAH,EAtCP,WACA,aACiB,WAA6C,IAG5DwB,EAHgB5E,EAA4C0E,UAAArE,OAAA,QAAAsE,IAAAD,UAAA,GAAAA,UAAA,GAApCxB,EAATM,GAAA1D,EAA6C4E,UAAArE,OAAA,EAAAqE,UAAA,QAAAC,EACtDE,EAAStB,IAAfzD,GACIgF,EAAU,CAAE/E,KAAF,GAAYE,OAA1B,aAGQe,EAAR6D,QACE,YACEA,YAGF,YACE,IACA5E,OAAA4E,YAGF,YACE,SACAC,EAAAD,uBASQ,IAAAtE,MAAA,mBAAA4D,OAANU,WAKCD,EACH,MAAAD,EADGC,GAEH,CAAAG,EAAA,CAAG7E,KAlCT,aAkCeF,QAAOF,KAAhBE,GAFJ8E,MAgMJ,SAAAnB,EAAAJ,EAAAC,EAAAC,MACMzC,gBAAJ,IAAkCuC,eAMxB,IAAAhD,MAAA,mBAAA4D,OAANZ,QAIEyB,EAAQf,iBAAdR,GACMwB,EAAU3B,EAAIC,EAAJD,UAAhBG,GAEMvD,aAAW+E,EAAjB/E,KAAMA,YAuCC,IAAAkD,EAxCP,OAwCOlD,EAtCU,WAAuC,IAAtCF,EAAsC0E,UAAArE,OAAA,QAAAsE,IAAAD,UAAA,GAAAA,UAAA,GAA9BxB,EAATM,GAAuC0B,EAAAC,EAC9BH,WAAxBhF,GADsD,GAChDoF,EADgDF,EAAA,GAChDL,EADgDK,EAAA,MAGtDE,WACElF,OACO,CAAPkF,KAGFP,UACMzE,EAAN,GACMiF,EAAN,GAVsDC,EAAA,SAY7CC,OACDC,EAAIxF,EAAVuF,GAboDE,EAAAN,EAcrCF,WAAfO,GAdoD,GAc9CjB,EAd8CkB,EAAA,GAc9CC,EAd8CD,EAAA,MAgBpDlB,SACeA,UAAY,CAAzBA,IACAoB,QAAaC,cACX7F,KAAe,CAAAwF,GAAApB,OAAWyB,EAA1B7F,QACAD,KAAAE,IACAM,KAAAsF,kBAKJL,GAAAG,GAdOH,EAAT,EAAgBA,EAAIvF,EAApBK,OAAkCkF,IAAKD,EAA9BC,MAiBLnF,EAAJC,OAAmB,KACXwF,EAAQzF,EAAd,YACAA,SACO,CAAPyF,SAGK,MAAAlB,EAAPU,KAkCJ,SAAAxB,EAAAN,EAAAC,EAAAC,MACE,WAAIzC,WAMM,IAAAT,MAAA,mBAAA4D,OAANZ,QAIEuC,EAAM7B,kBAAZR,GACMsC,EAAN,GACMC,EAAN,OAEK,IAALC,KAAA1C,EAA0B,GACxBjD,KAAA2F,OAEMC,EAAO5C,EADHC,EAAV0C,QACa3C,EAAbG,KACAwC,GAAAC,MAIIhG,aAAW6F,EAAjBtB,OAAMvE,YAwDC,IAAAkD,EAzDP,SAyDOlD,EAvDU,WAAuC,IAAtCF,EAAsC0E,UAAArE,OAAA,QAAAsE,IAAAD,UAAA,GAAAA,UAAA,GAA9BxB,EAATM,GACT4B,EADgDD,EACtCW,WAAhB9F,GADsD,SAGtDoF,WACElF,OACO,CAAPkF,OAGIhF,EAAN,GACMiF,EAAN,GACMc,EAAYrF,YAAlBd,GACMoG,EAAiBtF,YAAvBkF,MACa,IAAAK,IAAQF,SAArBC,IAEAT,QAAaM,gBACPT,EAAIxF,EAARiG,GACMC,EAAOF,EAAbC,WAEAtB,IAAIa,MAEEtC,EADMC,GAAYA,EAAtB8C,GACAjG,IAGFkG,GATkB,IAAAI,EAAAnB,EAeHe,aAAflG,GAfkB,GAeZuE,EAfY+B,EAAA,GAeZZ,EAfYY,EAAA,GAiBlB/B,GACeA,UAAY,CAAzBA,IACAoB,QAAaC,cACX7F,KAAe,CAAAkG,GAAA9B,OAAayB,EAA5B7F,QACAD,KAAAE,IACAM,KAAAsF,MAKAK,aAAJtB,IAAoBe,OAClBO,GAAAP,YAlBMnB,EAAI,CAAEzE,KAAFE,EAAeD,KAAM,CAArBkG,GAA4BjG,MAAtCwF,KACAlF,KAAAiG,MAqBAnG,EAAJC,OAAmB,KACXwF,EAAQzF,EAAd,YACAA,SACO,CAAPyF,SAGK,MAAAlB,EAAPU,KAcJ,SAAAnB,EAAAX,EAAAC,EAAAC,UACSM,EAAM,CAAAR,EAANQ,eAAPN,GA4FF,SAAAQ,EAAAV,EAAAC,EAAAC,MACE,WAAIzC,WAMM,IAAAT,MAAA,mBAAA4D,OAANZ,IAPqC,IAYnCiD,EADN/C,EAAMgD,MACNlD,MAEA,aAAIvC,WAMM,IAAAT,MAAA,iBAAA4D,OAANZ,QAIE2C,EAAOtC,OAEP1D,EAANqD,SAYO,IAAAH,EAbP,SAaOlD,EAXUF,YAAS,IAAA0G,EAAAvB,EACAe,WAAxBlG,GADwB,GAClBoF,EADkBsB,EAAA,GAClB7B,EADkB6B,EAAA,UAGxBtB,KACElF,OACO,CAAPkF,IAGK,MAAAT,EAAPE,KAcJ,SAAAnB,EAAAH,EAAAC,EAAAC,MACE,UAAIzC,WAMM,IAAAT,MAAA,mBAAA4D,OAANZ,QAIEoD,EAAQpD,MAAWe,mBAAKhB,WAA9BG,KACMuB,EAAQf,iBAAdR,GAEMvD,aAAWyG,MAAUC,mBAAKA,EAAfD,OAAjBlC,OAAMvE,YA+CC,IAAAkD,EAhDP,QAgDOlD,EA9CU,WAAuC,IAAtCF,EAAsC0E,UAAArE,OAAA,QAAAsE,IAAAD,UAAA,GAAAA,UAAA,GAA9BxB,EAATM,GACT4B,EADgDD,EACtCH,WAAhBhF,GADsD,SAGtDoF,WACElF,OACO,CAAPkF,WAGIC,EAAN,GACMjF,EAAN,GACMC,EAASwG,SAAS7G,EAAT6G,OAAuBF,EAAtCtG,QAVsDyG,EAAA,SAY7CvB,OACDW,EAAOS,EAAbpB,GACMC,EAAIxF,EAAVuF,OAEAW,EAAW,KACH3B,EAAI,CAAEzE,KAAFE,EAAeD,KAAM,CAArBwF,GAA0BvF,MAApCwF,YACAlF,KAAAyG,cAlBkD,IAAAC,EAAA7B,EAsBrCe,WAAfV,GAtBoD,GAsB9CjB,EAtB8CyC,EAAA,GAsB9CtB,EAtB8CsB,EAAA,MAwBpDzC,SACeA,UAAY,CAAzBA,IACAoB,QAAaC,cACX7F,KAAe,CAAAwF,GAAApB,OAAWyB,EAA1B7F,QACAD,KAAAE,IACAM,KAAAsF,kBAKJL,GAAAG,GAtBOH,EAAT,EAAgBA,EAAhBlF,EAA4BkF,IAAKuB,EAAxBvB,MAyBLnF,EAAJC,OAAmB,KACXwF,EAAQzF,EAAd,YACAA,SACO,CAAPyF,SAGK,MAAAlB,EAAPU,KAcJ,SAAAtB,EAAAR,EAAAC,EAAAC,MACE,UAAIzC,WAMM,IAAAT,MAAA,mBAAA4D,OAANZ,QAIEoD,EAAQpD,MAAWe,mBAAKhB,WAA9BG,KAEMvD,EAAOyG,MAAUC,mBAAKA,EAAfD,YAAb,cAiBO,IAAAvD,EAlBP,QAkBOlD,EAhBU,WAAuC,IAAtCF,EAAsC0E,UAAArE,OAAA,QAAAsE,IAAAD,UAAA,GAAAA,UAAA,GAA9BxB,EAATM,GACTpD,EAAN,GADsD6G,GAAA,EAAAC,GAAA,EAAAC,OAAAxC,EAAA,IAGjD,QAAAyC,EAAAC,EAALV,EAAKW,OAAAC,cAAAN,GAAAG,EAAAC,EAAA7E,QAAAgF,MAAAP,GAAA,EAAkB,KAAAQ,EAAAtC,EAAAiC,EAAApH,MACN4G,SAAf5G,GADqB,GACfuE,EADekD,EAAA,GACf/B,EADe+B,EAAA,OAGrBlD,QACS,MAAAI,EAAPe,KAGFpF,KAAAiE,IAVoD,MAAA/C,GAAA0F,GAAA,EAAAC,EAAA3F,EAAA,YAAAyF,GAAA,MAAAI,EAAA,QAAAA,EAAA,oBAAAH,EAAA,MAAAC,YAYtD,GAAAjH,OACAE,IAcJ,SAAA4D,EAAAT,EAAAC,EAAAC,MACE,UAAIzC,WAMM,IAAAT,MAAA,mBAAA4D,OAANZ,QAIEkD,EAAQlD,MAAWe,mBAAKhB,WAA9BG,KAEMvD,EAAOuG,MAAUiB,mBAAKA,EAAfjB,YAAb,cAkBO,IAAArD,EAnBP,eAmBOlD,EAjBU,WAAuC,IAClDsF,EADkDd,UAAArE,OAAA,QAAAsE,IAAAD,UAAA,GAAAA,UAAA,GAA9BxB,EAATM,GAAuCmE,GAAA,EAAAC,GAAA,EAAAC,OAAAlD,EAAA,IAGjD,QAAAmD,EAAAC,EAALtB,EAAKa,OAAAC,cAAAI,GAAAG,EAAAC,EAAAvF,QAAAgF,MAAAG,GAAA,EAAkB,KAAAK,EAAA7C,EAAA2C,EAAA9H,MACN0H,SAAflC,GADqB,GACfjB,EADeyD,EAAA,GACftC,EADesC,EAAA,MAGrBzD,WACErE,OACO,CAAPqE,KAGFmB,GAXoD,MAAAlE,GAAAoG,GAAA,EAAAC,EAAArG,EAAA,YAAAmG,GAAA,MAAAI,EAAA,QAAAA,EAAA,oBAAAH,EAAA,MAAAC,SAc/C,MAAAlD,EAAPa,KAYJ,IAAMyC,EAAQ,YAr0Bd,SAAA1E,EAAAC,EAAAC,MACMzC,gBAAJ,IAAkCuC,eAMxB,IAAAhD,MAAA,mBAAA4D,OAANZ,QAIEuC,EAAM7B,kBAAZR,GACMyE,EAAO5E,EAAIC,EAAJD,UAAbG,GACM0E,EAAS7E,EAAIC,EAAJD,UAAfG,GAEMvD,iBAAegI,EAAKhI,KAApBA,YAA4BiI,EAAlCjI,KAAMA,YAqDC,IAAAkD,EAtDP,OAsDOlD,EApDUF,gBACToI,EAAWlF,EAAjBM,KACQ4E,YAARpI,EAFwB,IAGlBoF,EAHkBD,EAGRW,WAAhB9F,GAHwB,SAKxBoF,WACElF,OACO,CAAPkF,OAGIC,EAAN,GACMjF,EAAN,GAXwBiI,EAAA,SAAAC,OAchB9C,EAAIxF,EAAVsI,GAdsBC,EAAApD,EAeP+C,WAAfI,GAfsB,GAehB/D,EAfgBgE,EAAA,GAehB7C,EAfgB6C,EAAA,MAiBtBhE,SACeA,UAAY,CAAzBA,IACAoB,QAAaC,cACX7F,KAAe,CAAAuI,GAAAnE,OAAWyB,EAA1B7F,QACAD,KAAAE,IACAM,KAAAsF,KALGgB,EAAA0B,eAUP5C,EA3BsB,IAAA8C,EAAArD,EA4BLgD,WAAjB3C,GA5BsB,GA4BhBiD,EA5BgBD,EAAA,GA4BhBE,EA5BgBF,EAAA,MA8BtBC,SACgBA,UAAa,CAA3BA,IACA9C,QAAcC,cACZ7F,KAAe,CAAAuI,GAAAnE,OAAWyB,EAA1B7F,QACAD,KAAAE,IACAM,KAAAsF,KALIgB,EAAA0B,eAURA,GAAAI,EAxCsB9B,EAAA0B,OAanB,IAAL1B,KAAA5G,EAAqBqI,EAArBzB,MA8BIxG,EAAJC,OAAmB,KACXwF,EAAQzF,EAAd,YACAA,SACO,CAAPyF,SAGK,MAAAlB,EAAPU,WAowBUjB,QA/sBd,SAAAb,EAAAC,EAAAC,UAEYE,EAAK,CADLS,aACAT,EAAVF,aA6sBYG,WAroBd,SAAAL,EAAAC,EAAAC,OAEQvD,qBAAmBqD,EAAzBT,KAAM5C,YAOC,IAAAkD,EARP,WAQOlD,EANU,WAAuC,IAAtCF,EAAsC0E,UAAArE,OAAA,QAAAsE,IAAAD,UAAA,GAAAA,UAAA,GAA9BxB,EAATM,UACRxD,eACH,MAAA2E,EADG3E,GAEH,CAAC,CAAEF,KAAFE,EAAeD,KAAf,GAAyBC,QAAOE,sBAczC,SAAAqD,EAAAC,EAAAC,MACE,WAAIzC,WAMM,IAAAT,MAAA,mBAAA4D,OAANZ,QAIEwC,EAAN,GACMC,EAAN,OAEK,IAALC,KAAA1C,EAA0B,GACxBjD,KAAA2F,OAEMC,EAAO5C,EADHC,EAAV0C,QACa3C,EAAbG,KACAwC,GAAAC,MAIIhG,aAAW6F,EAAjBtB,OAAMvE,YA0CC,IAAAkD,EA3CP,YA2COlD,EAzCUF,gBACToI,EAAWlF,EAAjBM,KACQ4E,YAARpI,MACMI,EAAN,GACMiF,EAANrF,EAJwB2I,EAAA,SAMxBC,OACMpD,EAAIxF,EAAR4I,GACM1C,EAAOF,EAAb4C,QAEAjE,IAAIa,MAEEtC,EADMC,GAAYA,EAAtByF,GACA5I,IAZoB,IAAA6I,EAAA1D,EAePe,aAAflG,GAfsB,GAehBuE,EAfgBsE,EAAA,GAehBnD,EAfgBmD,EAAA,MAiBtBtE,SACeA,UAAY,CAAzBA,IACAoB,QAAaC,cACX7F,KAAe,CAAA6I,GAAAzE,OAAayB,EAA5B7F,QACAD,KAAAE,IACAM,KAAAsF,iBAKAK,aAAJtB,IAAoBe,OAClBkD,GAAAlD,QAtBC,IAALkD,KAAA5C,EAA8B2C,EAA9BC,MA0BIxI,EAAJC,OAAmB,KACXwF,EAAQzF,EAAd,YACAA,SACO,CAAPyF,SAGK,MAAAlB,EAAPU,WAcJ,SAAA9B,EAAAC,EAAAC,MACE,aAAIzC,WAMM,IAAAT,MAAA,mBAAA4D,OAANZ,QAIJ2C,EACA4C,WAWO,IAAA1F,EAVP,OACA,UACgBpD,qBACLuD,MACTT,KAAYgG,EAAZ5C,OACAhG,KAAY4I,EAAZ5I,OACAmD,SAAgByF,EAAhBzF,SACO6C,WAAPlG,qBA6HJ,SAAAuD,EAAAC,EAAAC,OAEQvD,qBAAmBU,eAAzB2C,WAOO,IAAAH,EARP,UAQOlD,EANU,WAAuC,IAAtCF,EAAsC0E,UAAArE,OAAA,QAAAsE,IAAAD,UAAA,GAAAA,UAAA,GAA9BxB,EAATM,UACRxD,MACH,MAAA2E,EADG3E,GAEH,CAAC,CAAEF,KAAFE,EAAeD,KAAf,GAAyBC,QAAOE,wCAoHzC,SAAAqD,EAAAC,EAAAC,MACE,WAAIzC,WAMM,IAAAT,MAAA,mBAAA4D,OAANZ,QAIEuC,EAAM7B,kBAAZR,GACMsC,EAAN,GACMC,EAAN,OAEK,IAALC,KAAA1C,EAA0B,GACxBjD,KAAA2F,OAEMC,EAAO5C,EADHC,EAAV0C,QACa3C,EAAbG,KACAwC,GAAAC,MAIIhG,aAAW6F,EAAjBtB,OAAMvE,gBA+CC,IAAAkD,EAhDP,UAgDOlD,EA9CU,WAAuC,IAAtCF,EAAsC0E,UAAArE,OAAA,QAAAsE,IAAAD,UAAA,GAAAA,UAAA,GAA9BxB,EAATM,GACT4B,EADgDD,EACtCW,WAAhB9F,GADsD,SAGtDoF,WACElF,OACO,CAAPkF,OAGIhF,EAAN,GACMiF,EAAN,GATsD0D,EAAA,SAWtDC,OACMxD,EAAIxF,EAARgJ,GACM9C,EAAOF,EAAbgD,QAEArE,IAAIa,MAEEtC,EADMC,GAAYA,EAAtB6F,GACAhJ,IAjBkD,IAAAiJ,EAAA9D,EAoBrCe,aAAflG,GApBoD,GAoB9CuE,EApB8C0E,EAAA,GAoB9CvD,EApB8CuD,EAAA,MAsBpD1E,SACeA,UAAY,CAAzBA,IACAoB,QAAaC,cACX7F,KAAe,CAAAiJ,GAAA7E,OAAayB,EAA5B7F,QACAD,KAAAE,IACAM,KAAAsF,iBAKAK,aAAJtB,IAAoBe,OAClBsD,GAAAtD,QAtBC,IAALsD,KAAAhD,EAA8B+C,EAA9BC,MA0BI5I,EAAJC,OAAmB,KACXwF,EAAQzF,EAAd,YACAA,SACO,CAAPyF,SAGK,MAAAlB,EAAPU,sDA3SJ,SAAA6D,EAAA1F,EAAAC,MACE,aAAIzC,WAMM,IAAAT,MAAA,mBAAA4D,OAAN+E,WA4BG,IAAA9F,EAxBP,UACA,aACiB,WAA6C,IAA5CpD,EAA4C0E,UAAArE,OAAA,QAAAsE,IAAAD,UAAA,GAAAA,UAAA,GAApCxB,EAATM,GAAA1D,EAA6C4E,UAAArE,OAAA,EAAAqE,UAAA,QAAAC,EACtDpB,EAAS2F,IAAfpJ,MAEA,aAAIkB,WAMM,IAAAT,MAAA,mBAAA4D,OAANZ,IATwD,IAAA4F,EAAAhE,EAapC5B,WAAxBvD,GAb4D,GAatDoF,EAbsD+D,EAAA,GAatDtE,EAbsDsE,EAAA,UAe5D/D,EACS,CAAPA,GAGK,MAAAT,EAAPE,OCpZEuE,EAAQ,KACPpJ,wBAAmB2E,IAAV3E,ICjChB,SAAAqJ,IAAkC,IAAbC,EAAa5E,UAAArE,OAAA,QAAAsE,IAAAD,UAAA,GAAAA,UAAA,GAAlC,GACQ+B,SAEA6C,SAFN,aAcAR,EAAAvF,EAAAC,GAAgD,IAAdC,EAAciB,UAAArE,OAAA,QAAAsE,IAAAD,UAAA,GAAAA,UAAA,GAAhD,GACMzB,EAAJM,OACWA,EAATA,YAGI2C,EAAO+B,kBAA0CxB,oBAEvD8C,EAAAzJ,MACMF,gBAAJ2J,QAMU,IAAAhJ,MAAN,iCAIGgJ,SAAPzJ,iBAGF0J,eAAAD,EAAAxG,EAAyC,CAAE/C,OAA3C,WACAwJ,eAAAD,EAAAvG,EAAoC,CAAEhD,MAAtCkG,MAEAA,KAAcA,EAAdpD,OACA5C,KAAcgG,EAAdhG,OACAqD,WACAJ,SAAAK,IACAC,YAEAgG,OAAgBzJ,YAAS,IAAA0J,EAAAvE,EACCe,WAAxBlG,GADuB,GACjBoF,EADiBsE,EAAA,GACjB7E,EADiB6E,EAAA,MAGvBtE,QACQ,IAAA5F,EAAN4F,UAGFP,KAGF8E,KAAc3J,mBAASmF,EACLe,WAAhBlG,GADqB,SAKvBqD,SAAkBrD,YAAS,IAAA4J,EAAAzE,EACDe,WAAxBlG,GADyB,GACnBoF,EADmBwE,EAAA,GACnB/E,EADmB+E,EAAA,UAGzBxE,EACS,CAAC,IAAA5F,EAAR4F,IAGK,MAAAT,EAAPE,IAGF0E,gBAOFrB,KAAAD,GAAAtC,QAA2B7C,gBACnBoD,EAAO+B,EAAbnF,KAEAA,GAAe,SAAAS,EAAAC,EAAAC,UAEHqF,EADG5C,cAAqCO,WACxCqC,EAAVrF,MASJqF,EDhGY,gTAAd,WAyCAe,QAAc3J,cACZA,GAAcF,mBAASgB,OAAvBd,KAUFkJ,OAAapJ,kBAASgB,gBAA6B8I,MAAnDV,IElDeC","file":"chunk.d65271a7aeb10bf0de29.js","sourcesContent":["/**\n * Define a struct error.\n *\n * @type {StructError}\n */\n\nclass StructError extends TypeError {\n  static format(attrs) {\n    const { type, path, value } = attrs\n    const message = `Expected a value of type \\`${type}\\`${\n      path.length ? ` for \\`${path.join('.')}\\`` : ''\n    } but received \\`${JSON.stringify(value)}\\`.`\n    return message\n  }\n\n  constructor(attrs) {\n    const message = StructError.format(attrs)\n    super(message)\n\n    const { data, path, value, reason, type, errors = [] } = attrs\n    this.data = data\n    this.path = path\n    this.value = value\n    this.reason = reason\n    this.type = type\n    this.errors = errors\n\n    if (!errors.length) {\n      errors.push(this)\n    }\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor)\n    } else {\n      this.stack = new Error().stack\n    }\n  }\n}\n\n/**\n * Export.\n *\n * @type {StructError}\n */\n\nexport default StructError\n","var toString = Object.prototype.toString;\n\nmodule.exports = function kindOf(val) {\n  if (val === void 0) return 'undefined';\n  if (val === null) return 'null';\n\n  var type = typeof val;\n  if (type === 'boolean') return 'boolean';\n  if (type === 'string') return 'string';\n  if (type === 'number') return 'number';\n  if (type === 'symbol') return 'symbol';\n  if (type === 'function') {\n    return isGeneratorFn(val) ? 'generatorfunction' : 'function';\n  }\n\n  if (isArray(val)) return 'array';\n  if (isBuffer(val)) return 'buffer';\n  if (isArguments(val)) return 'arguments';\n  if (isDate(val)) return 'date';\n  if (isError(val)) return 'error';\n  if (isRegexp(val)) return 'regexp';\n\n  switch (ctorName(val)) {\n    case 'Symbol': return 'symbol';\n    case 'Promise': return 'promise';\n\n    // Set, Map, WeakSet, WeakMap\n    case 'WeakMap': return 'weakmap';\n    case 'WeakSet': return 'weakset';\n    case 'Map': return 'map';\n    case 'Set': return 'set';\n\n    // 8-bit typed arrays\n    case 'Int8Array': return 'int8array';\n    case 'Uint8Array': return 'uint8array';\n    case 'Uint8ClampedArray': return 'uint8clampedarray';\n\n    // 16-bit typed arrays\n    case 'Int16Array': return 'int16array';\n    case 'Uint16Array': return 'uint16array';\n\n    // 32-bit typed arrays\n    case 'Int32Array': return 'int32array';\n    case 'Uint32Array': return 'uint32array';\n    case 'Float32Array': return 'float32array';\n    case 'Float64Array': return 'float64array';\n  }\n\n  if (isGeneratorObj(val)) {\n    return 'generator';\n  }\n\n  // Non-plain objects\n  type = toString.call(val);\n  switch (type) {\n    case '[object Object]': return 'object';\n    // iterators\n    case '[object Map Iterator]': return 'mapiterator';\n    case '[object Set Iterator]': return 'setiterator';\n    case '[object String Iterator]': return 'stringiterator';\n    case '[object Array Iterator]': return 'arrayiterator';\n  }\n\n  // other\n  return type.slice(8, -1).toLowerCase().replace(/\\s/g, '');\n};\n\nfunction ctorName(val) {\n  return val.constructor ? val.constructor.name : null;\n}\n\nfunction isArray(val) {\n  if (Array.isArray) return Array.isArray(val);\n  return val instanceof Array;\n}\n\nfunction isError(val) {\n  return val instanceof Error || (typeof val.message === 'string' && val.constructor && typeof val.constructor.stackTraceLimit === 'number');\n}\n\nfunction isDate(val) {\n  if (val instanceof Date) return true;\n  return typeof val.toDateString === 'function'\n    && typeof val.getDate === 'function'\n    && typeof val.setDate === 'function';\n}\n\nfunction isRegexp(val) {\n  if (val instanceof RegExp) return true;\n  return typeof val.flags === 'string'\n    && typeof val.ignoreCase === 'boolean'\n    && typeof val.multiline === 'boolean'\n    && typeof val.global === 'boolean';\n}\n\nfunction isGeneratorFn(name, val) {\n  return ctorName(name) === 'GeneratorFunction';\n}\n\nfunction isGeneratorObj(val) {\n  return typeof val.throw === 'function'\n    && typeof val.return === 'function'\n    && typeof val.next === 'function';\n}\n\nfunction isArguments(val) {\n  try {\n    if (typeof val.length === 'number' && typeof val.callee === 'function') {\n      return true;\n    }\n  } catch (err) {\n    if (err.message.indexOf('callee') !== -1) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * If you need to support Safari 5-7 (8-10 yr-old browser),\n * take a look at https://github.com/feross/is-buffer\n */\n\nfunction isBuffer(val) {\n  if (val.constructor && typeof val.constructor.isBuffer === 'function') {\n    return val.constructor.isBuffer(val);\n  }\n  return false;\n}\n","/**\n * A private string to identify structs by.\n *\n * @type {String}\n */\n\nconst IS_STRUCT = '@@__STRUCT__@@'\n\n/**\n * A private string to refer to a struct's kind.\n *\n * @type {String}\n */\n\nconst KIND = '@@__KIND__@@'\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport { IS_STRUCT, KIND }\n","import { IS_STRUCT } from './constants'\n\n/**\n * Check if a `value` is a struct.\n *\n * @param {Any} value\n * @return {Boolean}\n */\n\nexport function isStruct(value) {\n  return !!(value && value[IS_STRUCT])\n}\n\n/**\n * Resolve `defaults`, for an optional `value`.\n *\n * @param {Function|Any} defaults\n * @param {Any} value\n * @return {Any}\n */\n\nexport function resolveDefaults(defaults, value) {\n  return typeof defaults === 'function' ? defaults(value) : defaults\n}\n","import kindOf from 'kind-of'\n\nimport { KIND } from './constants'\nimport { isStruct, resolveDefaults } from './utils'\n\n/**\n * Kind.\n *\n * @type {Kind}\n */\n\nclass Kind {\n  constructor(name, type, validate) {\n    this.name = name\n    this.type = type\n    this.validate = validate\n  }\n}\n\n/**\n * Any.\n *\n * @param {Array|Function|Object|String} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction any(schema, defaults, options) {\n  if (isStruct(schema)) {\n    return schema[KIND]\n  }\n\n  if (schema instanceof Kind) {\n    return schema\n  }\n\n  switch (kindOf(schema)) {\n    case 'array': {\n      return schema.length > 1\n        ? tuple(schema, defaults, options)\n        : list(schema, defaults, options)\n    }\n\n    case 'function': {\n      return func(schema, defaults, options)\n    }\n\n    case 'object': {\n      return object(schema, defaults, options)\n    }\n\n    case 'string': {\n      let required = true\n      let type\n\n      if (schema.endsWith('?')) {\n        required = false\n        schema = schema.slice(0, -1)\n      }\n\n      if (schema.includes('|')) {\n        const scalars = schema.split(/\\s*\\|\\s*/g)\n        type = union(scalars, defaults, options)\n      } else if (schema.includes('&')) {\n        const scalars = schema.split(/\\s*&\\s*/g)\n        type = intersection(scalars, defaults, options)\n      } else {\n        type = scalar(schema, defaults, options)\n      }\n\n      if (!required) {\n        type = optional(type, undefined, options)\n      }\n\n      return type\n    }\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    throw new Error(\n      `A schema definition must be an object, array, string or function, but you passed: ${schema}`\n    )\n  } else {\n    throw new Error(`Invalid schema: ${schema}`)\n  }\n}\n\n/**\n * Dict.\n *\n * @param {Array} schema\n * @param {Object} defaults\n * @param {Object} options\n */\n\nfunction dict(schema, defaults, options) {\n  if (kindOf(schema) !== 'array' || schema.length !== 2) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Dict structs must be defined as an array with two elements, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const obj = scalar('object', undefined, options)\n  const keys = any(schema[0], undefined, options)\n  const values = any(schema[1], undefined, options)\n  const name = 'dict'\n  const type = `dict<${keys.type},${values.type}>`\n  const validate = value => {\n    const resolved = resolveDefaults(defaults)\n    value = resolved ? { ...resolved, ...value } : value\n    const [error] = obj.validate(value)\n\n    if (error) {\n      error.type = type\n      return [error]\n    }\n\n    const ret = {}\n    const errors = []\n\n    for (let k in value) {\n      const v = value[k]\n      const [e, r] = keys.validate(k)\n\n      if (e) {\n        const allE = e.errors || [e]\n        allE.forEach(singleE => {\n          singleE.path = [k].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        continue\n      }\n\n      k = r\n      const [e2, r2] = values.validate(v)\n\n      if (e2) {\n        const allE2 = e2.errors || [e2]\n        allE2.forEach(singleE => {\n          singleE.path = [k].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        continue\n      }\n\n      ret[k] = r2\n    }\n\n    if (errors.length) {\n      const first = errors[0]\n      first.errors = errors\n      return [first]\n    }\n\n    return [undefined, ret]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Enum.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction en(schema, defaults, options) {\n  if (kindOf(schema) !== 'array') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Enum structs must be defined as an array, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const name = 'enum'\n  const type = schema\n    .map(s => {\n      try {\n        return JSON.stringify(s)\n      } catch (e) {\n        return String(s)\n      }\n    })\n    .join(' | ')\n\n  const validate = (value = resolveDefaults(defaults)) => {\n    return schema.includes(value)\n      ? [undefined, value]\n      : [{ data: value, path: [], value, type }]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Enums.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction enums(schema, defaults, options) {\n  const e = en(schema, undefined, options)\n  const l = list([e], defaults, options)\n  return l\n}\n\n/**\n * Function.\n *\n * @param {Function} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction func(schema, defaults, options) {\n  if (kindOf(schema) !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Function structs must be defined as a function, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const name = 'function'\n  const type = '<function>'\n  const validate = (value = resolveDefaults(defaults), data) => {\n    const result = schema(value, data)\n    let failure = { path: [], reason: null }\n    let isValid\n\n    switch (kindOf(result)) {\n      case 'boolean': {\n        isValid = result\n        break\n      }\n      case 'string': {\n        isValid = false\n        failure.reason = result\n        break\n      }\n      case 'object': {\n        isValid = false\n        failure = { ...failure, ...result }\n        break\n      }\n      default: {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            `Validator functions must return a boolean, an error reason string or an error reason object, but you passed: ${schema}`\n          )\n        } else {\n          throw new Error(`Invalid result: ${result}`)\n        }\n      }\n    }\n\n    return isValid\n      ? [undefined, value]\n      : [{ type, value, data: value, ...failure }]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Instance.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction instance(schema, defaults, options) {\n  const name = 'instance'\n  const type = `instance<${schema.name}>`\n  const validate = (value = resolveDefaults(defaults)) => {\n    return value instanceof schema\n      ? [undefined, value]\n      : [{ data: value, path: [], value, type }]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Interface.\n *\n * @param {Object} schema\n * @param {Object} defaults\n * @param {Object} options\n */\n\nfunction inter(schema, defaults, options) {\n  if (kindOf(schema) !== 'object') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Interface structs must be defined as an object, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const ks = []\n  const properties = {}\n\n  for (const key in schema) {\n    ks.push(key)\n    const s = schema[key]\n    const kind = any(s, undefined, options)\n    properties[key] = kind\n  }\n\n  const name = 'interface'\n  const type = `{${ks.join()}}`\n  const validate = value => {\n    const resolved = resolveDefaults(defaults)\n    value = resolved ? { ...resolved, ...value } : value\n    const errors = []\n    const ret = value\n\n    for (const key in properties) {\n      let v = value[key]\n      const kind = properties[key]\n\n      if (v === undefined) {\n        const d = defaults && defaults[key]\n        v = resolveDefaults(d, value)\n      }\n\n      const [e, r] = kind.validate(v, value)\n\n      if (e) {\n        const allE = e.errors || [e]\n        allE.forEach(singleE => {\n          singleE.path = [key].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        continue\n      }\n\n      if (key in value || r !== undefined) {\n        ret[key] = r\n      }\n    }\n\n    if (errors.length) {\n      const first = errors[0]\n      first.errors = errors\n      return [first]\n    }\n\n    return [undefined, ret]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Lazy.\n *\n * @param {Function} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction lazy(schema, defaults, options) {\n  if (kindOf(schema) !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Lazy structs must be defined as an function that returns a schema, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  let kind\n  let struct\n  const name = 'lazy'\n  const type = `lazy...`\n  const compile = value => {\n    struct = schema()\n    kind.name = struct.kind\n    kind.type = struct.type\n    kind.validate = struct.validate\n    return kind.validate(value)\n  }\n\n  kind = new Kind(name, type, compile)\n  return kind\n}\n\n/**\n * Dynamic.\n *\n * @param {Function} createSchema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction dynamic(createSchema, defaults, options) {\n  if (kindOf(createSchema) !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Dynamic structs must be defined as a function, but you passed: ${createSchema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${createSchema}`)\n    }\n  }\n\n  const name = 'dynamic'\n  const type = 'dynamic...'\n  const validate = (value = resolveDefaults(defaults), data) => {\n    const schema = createSchema(value, data)\n\n    if (kindOf(schema) !== 'function') {\n      if (process.env.NODE_ENV !== 'production') {\n        throw new Error(\n          `Dynamic structs must return a schema, but you passed: ${schema}`\n        )\n      } else {\n        throw new Error(`Invalid schema: ${schema}`)\n      }\n    }\n\n    const [error, result] = schema.validate(value)\n\n    if (error) {\n      return [error]\n    }\n\n    return [undefined, result]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * List.\n *\n * @param {Array} schema\n * @param {Array} defaults\n * @param {Object} options\n */\n\nfunction list(schema, defaults, options) {\n  if (kindOf(schema) !== 'array' || schema.length !== 1) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `List structs must be defined as an array with a single element, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const array = scalar('array', undefined, options)\n  const element = any(schema[0], undefined, options)\n  const name = 'list'\n  const type = `[${element.type}]`\n  const validate = (value = resolveDefaults(defaults)) => {\n    const [error, result] = array.validate(value)\n\n    if (error) {\n      error.type = type\n      return [error]\n    }\n\n    value = result\n    const errors = []\n    const ret = []\n\n    for (let i = 0; i < value.length; i++) {\n      const v = value[i]\n      const [e, r] = element.validate(v)\n\n      if (e) {\n        const allE = e.errors || [e]\n        allE.forEach(singleE => {\n          singleE.path = [i].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        continue\n      }\n\n      ret[i] = r\n    }\n\n    if (errors.length) {\n      const first = errors[0]\n      first.errors = errors\n      return [first]\n    }\n\n    return [undefined, ret]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Literal.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction literal(schema, defaults, options) {\n  const name = 'literal'\n  const type = `literal: ${JSON.stringify(schema)}`\n  const validate = (value = resolveDefaults(defaults)) => {\n    return value === schema\n      ? [undefined, value]\n      : [{ data: value, path: [], value, type }]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Object.\n *\n * @param {Object} schema\n * @param {Object} defaults\n * @param {Object} options\n */\n\nfunction object(schema, defaults, options) {\n  if (kindOf(schema) !== 'object') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Object structs must be defined as an object, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const obj = scalar('object', undefined, options)\n  const ks = []\n  const properties = {}\n\n  for (const key in schema) {\n    ks.push(key)\n    const s = schema[key]\n    const kind = any(s, undefined, options)\n    properties[key] = kind\n  }\n\n  const name = 'object'\n  const type = `{${ks.join()}}`\n  const validate = (value = resolveDefaults(defaults)) => {\n    const [error] = obj.validate(value)\n\n    if (error) {\n      error.type = type\n      return [error]\n    }\n\n    const errors = []\n    const ret = {}\n    const valueKeys = Object.keys(value)\n    const propertiesKeys = Object.keys(properties)\n    const keys = new Set(valueKeys.concat(propertiesKeys))\n\n    keys.forEach(key => {\n      let v = value[key]\n      const kind = properties[key]\n\n      if (v === undefined) {\n        const d = defaults && defaults[key]\n        v = resolveDefaults(d, value)\n      }\n\n      if (!kind) {\n        const e = { data: value, path: [key], value: v }\n        errors.push(e)\n        return\n      }\n\n      const [e, r] = kind.validate(v, value)\n\n      if (e) {\n        const allE = e.errors || [e]\n        allE.forEach(singleE => {\n          singleE.path = [key].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        return\n      }\n\n      if (key in value || r !== undefined) {\n        ret[key] = r\n      }\n    })\n\n    if (errors.length) {\n      const first = errors[0]\n      first.errors = errors\n      return [first]\n    }\n\n    return [undefined, ret]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Optional.\n *\n * @param {Any} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction optional(schema, defaults, options) {\n  return union([schema, 'undefined'], defaults, options)\n}\n\n/**\n * Partial.\n *\n * @param {Object} schema\n * @param {Object} defaults\n * @param {Object} options\n */\n\nfunction partial(schema, defaults, options) {\n  if (kindOf(schema) !== 'object') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Partial structs must be defined as an object, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const obj = scalar('object', undefined, options)\n  const ks = []\n  const properties = {}\n\n  for (const key in schema) {\n    ks.push(key)\n    const s = schema[key]\n    const kind = any(s, undefined, options)\n    properties[key] = kind\n  }\n\n  const name = 'partial'\n  const type = `{${ks.join()},...}`\n  const validate = (value = resolveDefaults(defaults)) => {\n    const [error] = obj.validate(value)\n\n    if (error) {\n      error.type = type\n      return [error]\n    }\n\n    const errors = []\n    const ret = {}\n\n    for (const key in properties) {\n      let v = value[key]\n      const kind = properties[key]\n\n      if (v === undefined) {\n        const d = defaults && defaults[key]\n        v = resolveDefaults(d, value)\n      }\n\n      const [e, r] = kind.validate(v, value)\n\n      if (e) {\n        const allE = e.errors || [e]\n        allE.forEach(singleE => {\n          singleE.path = [key].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        continue\n      }\n\n      if (key in value || r !== undefined) {\n        ret[key] = r\n      }\n    }\n\n    if (errors.length) {\n      const first = errors[0]\n      first.errors = errors\n      return [first]\n    }\n\n    return [undefined, ret]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Scalar.\n *\n * @param {String} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction scalar(schema, defaults, options) {\n  if (kindOf(schema) !== 'string') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Scalar structs must be defined as a string, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const { types } = options\n  const fn = types[schema]\n\n  if (kindOf(fn) !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `No struct validator function found for type \"${schema}\".`\n      )\n    } else {\n      throw new Error(`Invalid type: ${schema}`)\n    }\n  }\n\n  const kind = func(fn, defaults, options)\n  const name = 'scalar'\n  const type = schema\n  const validate = value => {\n    const [error, result] = kind.validate(value)\n\n    if (error) {\n      error.type = type\n      return [error]\n    }\n\n    return [undefined, result]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Tuple.\n *\n * @param {Array} schema\n * @param {Array} defaults\n * @param {Object} options\n */\n\nfunction tuple(schema, defaults, options) {\n  if (kindOf(schema) !== 'array') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Tuple structs must be defined as an array, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const kinds = schema.map(s => any(s, undefined, options))\n  const array = scalar('array', undefined, options)\n  const name = 'tuple'\n  const type = `[${kinds.map(k => k.type).join()}]`\n  const validate = (value = resolveDefaults(defaults)) => {\n    const [error] = array.validate(value)\n\n    if (error) {\n      error.type = type\n      return [error]\n    }\n\n    const ret = []\n    const errors = []\n    const length = Math.max(value.length, kinds.length)\n\n    for (let i = 0; i < length; i++) {\n      const kind = kinds[i]\n      const v = value[i]\n\n      if (!kind) {\n        const e = { data: value, path: [i], value: v }\n        errors.push(e)\n        continue\n      }\n\n      const [e, r] = kind.validate(v)\n\n      if (e) {\n        const allE = e.errors || [e]\n        allE.forEach(singleE => {\n          singleE.path = [i].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        continue\n      }\n\n      ret[i] = r\n    }\n\n    if (errors.length) {\n      const first = errors[0]\n      first.errors = errors\n      return [first]\n    }\n\n    return [undefined, ret]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Union.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction union(schema, defaults, options) {\n  if (kindOf(schema) !== 'array') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Union structs must be defined as an array, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const kinds = schema.map(s => any(s, undefined, options))\n  const name = 'union'\n  const type = kinds.map(k => k.type).join(' | ')\n  const validate = (value = resolveDefaults(defaults)) => {\n    const errors = []\n\n    for (const k of kinds) {\n      const [e, r] = k.validate(value)\n\n      if (!e) {\n        return [undefined, r]\n      }\n\n      errors.push(e)\n    }\n    errors[0].type = type\n    return errors\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Intersection.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction intersection(schema, defaults, options) {\n  if (kindOf(schema) !== 'array') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Intersection structs must be defined as an array, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const types = schema.map(s => any(s, undefined, options))\n  const name = 'intersection'\n  const type = types.map(t => t.type).join(' & ')\n  const validate = (value = resolveDefaults(defaults)) => {\n    let v = value\n\n    for (const t of types) {\n      const [e, r] = t.validate(v)\n\n      if (e) {\n        e.type = type\n        return [e]\n      }\n\n      v = r\n    }\n\n    return [undefined, v]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Kinds.\n *\n * @type {Object}\n */\n\nconst Kinds = {\n  any,\n  dict,\n  enum: en,\n  enums,\n  function: func,\n  instance,\n  interface: inter,\n  lazy,\n  list,\n  literal,\n  object,\n  optional,\n  partial,\n  scalar,\n  tuple,\n  union,\n  intersection,\n  dynamic,\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Kinds\n","import kindOf from 'kind-of'\n\n/**\n * The types that `kind-of` supports.\n *\n * @type {Array}\n */\n\nconst TYPES = [\n  'arguments',\n  'array',\n  'boolean',\n  'buffer',\n  'error',\n  'float32array',\n  'float64array',\n  'function',\n  'generatorfunction',\n  'int16array',\n  'int32array',\n  'int8array',\n  'map',\n  'null',\n  'number',\n  'object',\n  'promise',\n  'regexp',\n  'set',\n  'string',\n  'symbol',\n  'uint16array',\n  'uint32array',\n  'uint8array',\n  'uint8clampedarray',\n  'undefined',\n  'weakmap',\n  'weakset',\n]\n\n/**\n * The default types that Superstruct ships with.\n *\n * @type {Object}\n */\n\nconst Types = {\n  any: value => value !== undefined,\n}\n\nTYPES.forEach(type => {\n  Types[type] = value => kindOf(value) === type\n})\n\n/**\n * Handle the 'date' case specially, to throw out invalid `Date` objects.\n *\n * @param {Mixed} value\n * @return {Boolean}\n */\n\nTypes.date = value => kindOf(value) === 'date' && !isNaN(value)\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Types\n","import Kinds from './kinds'\nimport StructError from './error'\nimport Types from './types'\nimport { isStruct } from './utils'\nimport { IS_STRUCT, KIND } from './constants'\n\n/**\n * Create a struct factory with a `config`.\n *\n * @param {Object} config\n * @return {Function}\n */\n\nfunction superstruct(config = {}) {\n  const types = {\n    ...Types,\n    ...(config.types || {}),\n  }\n\n  /**\n   * Create a `kind` struct with `schema`, `defaults` and `options`.\n   *\n   * @param {Any} schema\n   * @param {Any} defaults\n   * @param {Object} options\n   * @return {Function}\n   */\n\n  function struct(schema, defaults, options = {}) {\n    if (isStruct(schema)) {\n      schema = schema.schema\n    }\n\n    const kind = Kinds.any(schema, defaults, { ...options, types })\n\n    function Struct(data) {\n      if (this instanceof Struct) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            'The `Struct` creation function should not be used with the `new` keyword.'\n          )\n        } else {\n          throw new Error('Invalid `new` keyword!')\n        }\n      }\n\n      return Struct.assert(data)\n    }\n\n    Object.defineProperty(Struct, IS_STRUCT, { value: true })\n    Object.defineProperty(Struct, KIND, { value: kind })\n\n    Struct.kind = kind.name\n    Struct.type = kind.type\n    Struct.schema = schema\n    Struct.defaults = defaults\n    Struct.options = options\n\n    Struct.assert = value => {\n      const [error, result] = kind.validate(value)\n\n      if (error) {\n        throw new StructError(error)\n      }\n\n      return result\n    }\n\n    Struct.test = value => {\n      const [error] = kind.validate(value)\n      return !error\n    }\n\n    Struct.validate = value => {\n      const [error, result] = kind.validate(value)\n\n      if (error) {\n        return [new StructError(error)]\n      }\n\n      return [undefined, result]\n    }\n\n    return Struct\n  }\n\n  /**\n   * Mix in a factory for each specific kind of struct.\n   */\n\n  Object.keys(Kinds).forEach(name => {\n    const kind = Kinds[name]\n\n    struct[name] = (schema, defaults, options) => {\n      const type = kind(schema, defaults, { ...options, types })\n      const s = struct(type, defaults, options)\n      return s\n    }\n  })\n\n  /**\n   * Return the struct factory.\n   */\n\n  return struct\n}\n\n/**\n * Export.\n *\n * @type {Function}\n */\n\nexport default superstruct\n","import StructError from './error'\nimport superstruct from './superstruct'\nimport { isStruct } from './utils'\n\n/**\n * Create a convenience `struct` factory for the default types.\n *\n * @type {Function}\n */\n\nconst struct = superstruct()\n\n/**\n * Export.\n *\n * @type {Function}\n */\n\nexport { struct, superstruct, isStruct, StructError }\n"],"sourceRoot":""}