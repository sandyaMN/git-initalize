{"version":3,"sources":["webpack:///./src/panels/config/cloud/alexa/cloud-alexa.ts"],"names":["IGNORE_INTERFACES","configIsExposed","config","undefined","should_expose","customElement","CloudAlexa","property","type","Boolean","memoizeOne","filter","generateFilter","include_domains","include_entities","exclude_domains","exclude_entities","_this2","this","_entities","html","_templateObject","emptyFilter","isEmptyFilter","cloudStatus","alexa_entities","filterFunc","_getEntityFilterFunc","showInExposed","_isInitialExposed","Set","trackExposed","selected","exposedCards","notExposedCards","forEach","entity","stateObj","hass","states","entity_id","_entityConfigs","isExposed","add","has","push","_templateObject2","_showMoreInfo","interfaces","ifc","includes","map","replace","join","_exposeChanged","localize","_templateObject3","narrow","_templateObject4","_templateObject5","_openDomainToggler","_templateObject6","length","_templateObject7","_templateObject8","changedProps","_get","_getPrototypeOf","prototype","call","_fetchData","prefs","alexa_entity_configs","entities","_this3","regeneratorRuntime","async","_context","prev","next","awrap","fetchCloudAlexaEntities","sent","sort","a","b","stateA","stateB","compare","computeStateName","stop","ev","entityId","currentTarget","fireEvent","newExposed","_context2","target","checked","_updateExposed","curExposed","_context3","abrupt","_updateConfig","_ensureEntitySync","values","updatedConfig","_context4","updateCloudAlexaEntityConfig","Object","assign","_ensureStatusReload","_this4","showDomainTogglerDialog","domains","computeDomain","value","idx","self","indexOf","toggleDomain","domain","turnOn","_popstateReloadStatusAttached","parent","parentElement","window","addEventListener","once","_popstateSyncAttached","css","_templateObject9","LitElement"],"mappings":"wrKAwCA,IACMA,EAAoB,CAAC,wBAErBC,EAAkB,SAACC,GAAD,YACGC,IAAzBD,EAAOE,eAEHF,EAAOE,u1LAEZC,YAAc,kCACTC,smBACHC,kEAEAA,yEAGAA,YAAS,CAAEC,KAAMC,gEAEjBF,uEAEAA,2DACkE,uEACnC,8EACQ,yHAGTG,YAAW,SAACC,GAAD,OACxCC,YACED,EAAOE,gBACPF,EAAOG,iBACPH,EAAOI,gBACPJ,EAAOK,wDAIX,WAA0C,IAAAC,EAAAC,KACxC,QAAuBf,IAAnBe,KAAKC,UACP,OAAOC,YAAPC,KAIF,IAAMC,EAAcC,YAAcL,KAAKM,YAAYC,gBAC7CC,EAAaR,KAAKS,qBACtBT,KAAKM,YAAYC,gBAMbG,EAAgBV,KAAKW,mBAAqB,IAAIC,IAC9CC,OAA0C5B,IAA3Be,KAAKW,kBAEtBG,EAAW,EAITC,EAAiC,GACjCC,EAAoC,GAqD1C,OAnDAhB,KAAKC,UAAUgB,QAAQ,SAACC,GACtB,IAAMC,EAAWpB,EAAKqB,KAAKC,OAAOH,EAAOI,WACnCtC,EAASe,EAAKwB,eAAeL,EAAOI,YAAc,GAClDE,EAAYpB,EACdrB,EAAgBC,GAChBwB,EAAWU,EAAOI,WAClBE,IACFV,IAEID,GACFH,EAAce,IAAIP,EAAOI,aAIdZ,EAAcgB,IAAIR,EAAOI,WACpCP,EACAC,GAEGW,KAAKzB,YAAZ0B,IAIgB7B,EAAKqB,KACDD,EAEHpB,EAAK8B,cAEZX,EAAOY,WACNrC,OAAO,SAACsC,GAAD,OAAUjD,EAAkBkD,SAASD,KAC5CE,IAAI,SAACF,GAAD,OACHA,EAAIG,QAAQ,SAAU,IAAIA,QAAQ,aAAc,MAEjDC,KAAK,MAGIjB,EAAOI,WACNlB,EACFoB,EACDzB,EAAKqC,eAEbrC,EAAKqB,KAAMiB,SAAS,0CAO5BxB,IACFb,KAAKW,kBAAoBD,GAGpBR,YAAPoC,IAC0BtC,KAAKoB,KAAMiB,SACjC,qCAGIvB,EACLd,KAAKuC,OAIF,GAHArC,YADJsC,KAQIpC,EACIF,YADOuC,IAKMzC,KAAK0C,oBAGlB,GAGHtC,EAMG,GALAF,YADJyC,IAGU3C,KAAKoB,KAAMiB,SAAS,uCAM5BtB,EAAa6B,OAAS,EAClB1C,YADJ2C,IAGU7C,KAAKoB,KAAMiB,SACX,gDAGmBtB,GAEzB,GAGJC,EAAgB4B,OAAS,EACrB1C,YADJ4C,IAGU9C,KAAKoB,KAAMiB,SACX,oDAGmBrB,GAEzB,8CAOd,SAAuB+B,GACrBC,EAAAC,EAnKE7D,EAmKF8D,WAAA,eAAAlD,MAAAmD,KAAAnD,KAAmB+C,GACnB/C,KAAKoD,kDAGP,SAAkBL,GAChBC,EAAAC,EAxKE7D,EAwKF8D,WAAA,UAAAlD,MAAAmD,KAAAnD,KAAc+C,GACVA,EAAarB,IAAI,iBACnB1B,KAAKuB,eAAiBvB,KAAKM,YAAY+C,MAAMC,8DAIjD,eAAAC,EAAAC,EAAAxD,KAAA,OAAAyD,mBAAAC,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAAAJ,mBAAAK,MACyBC,YAAwB/D,KAAKoB,OADtD,QACQmC,EADRI,EAAAK,MAEWC,KAAK,SAACC,EAAGC,GAChB,IAAMC,EAASZ,EAAKpC,KAAKC,OAAO6C,EAAE5C,WAC5B+C,EAASb,EAAKpC,KAAKC,OAAO8C,EAAE7C,WAClC,OAAOgD,YACLF,EAASG,YAAiBH,GAAUF,EAAE5C,UACtC+C,EAASE,YAAiBF,GAAUF,EAAE7C,aAG1CtB,KAAKC,UAAYsD,EAVnB,wBAAAI,EAAAa,SAAA,KAAAxE,iDAaA,SAAsByE,GACpB,IAAMC,EAAWD,EAAGE,cAAcxD,SAASG,UAC3CsD,YAAU5E,KAAM,iBAAkB,CAAE0E,yDAGtC,SAA6BD,GAA7B,IAAAC,EAAAG,EAAA,OAAApB,mBAAAC,MAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,cACQa,EAAYD,EAAGE,cAAsBD,SACrCG,EAAcJ,EAAGM,OAAoBC,QAF7CF,EAAAjB,KAAA,EAAAJ,mBAAAK,MAGQ9D,KAAKiF,eAAeP,EAAUG,IAHtC,wBAAAC,EAAAN,SAAA,KAAAxE,kDAMA,SAA6B0E,EAAkBG,GAA/C,IAAAK,EAAA,OAAAzB,mBAAAC,MAAA,SAAAyB,GAAA,cAAAA,EAAAvB,KAAAuB,EAAAtB,MAAA,UACQqB,EAAanG,EAAgBiB,KAAKuB,eAAemD,IAAa,IAChEG,IAAeK,EAFrB,CAAAC,EAAAtB,KAAA,eAAAsB,EAAAC,OAAA,wBAAAD,EAAAtB,KAAA,EAAAJ,mBAAAK,MAKQ9D,KAAKqF,cAAcX,EAAU,CACjCxF,cAAe2F,KANnB,OAQE7E,KAAKsF,oBARP,wBAAAH,EAAAX,SAAA,KAAAxE,iDAWA,SAA4B0E,EAAkBa,GAA9C,IAAAC,EAAA,OAAA/B,mBAAAC,MAAA,SAAA+B,GAAA,cAAAA,EAAA7B,KAAA6B,EAAA5B,MAAA,cAAA4B,EAAA5B,KAAA,EAAAJ,mBAAAK,MAC8B4B,YAC1B1F,KAAKoB,KACLsD,EACAa,IAJJ,OACQC,EADRC,EAAAzB,KAMEhE,KAAKuB,eAALoE,OAAAC,OAAA,GACK5F,KAAKuB,kBACIiE,KAAXd,OAFH,8FAIA1E,KAAK6F,sBAVP,wBAAAJ,EAAAjB,kBAAA,KAAAxE,sDAaA,WAA6B,IAAA8F,EAAA9F,KAC3B+F,YAAwB/F,KAAM,CAC5BgG,QAAShG,KAAKC,UAAWgC,IAAI,SAACf,GAAD,OAC3B+E,YAAc/E,EAAOI,aACrB7B,OAAO,SAACyG,EAAOC,EAAKC,GAAb,OAAsBA,EAAKC,QAAQH,KAAWC,IACvDG,aAAc,SAACC,EAAQC,GACrBV,EAAK7F,UAAWgB,QAAQ,SAACC,GACnB+E,YAAc/E,EAAOI,aAAeiF,GACtCT,EAAKb,eAAe/D,EAAOI,UAAWkF,yDAOhD,WACE,IAAIxG,KAAKyG,8BAAT,CAGAzG,KAAKyG,+BAAgC,EAGrC,IAAMC,EAAS1G,KAAK2G,cACpBC,OAAOC,iBACL,WACA,kBAAMjC,YAAU8B,EAAQ,4BACxB,CAAEI,MAAM,oDAIZ,WACM9G,KAAK+G,wBAGT/G,KAAK+G,uBAAwB,EAI7BH,OAAOC,iBACL,WACA,aAKA,CAAEC,MAAM,gDAIZ,WACE,OAAOE,YAAPC,UAhRqBC","file":"chunk.313ea9ccf53e82330760.js","sourcesContent":["import {\n  LitElement,\n  TemplateResult,\n  html,\n  CSSResult,\n  css,\n  customElement,\n  property,\n} from \"lit-element\";\nimport \"@polymer/paper-icon-button\";\nimport memoizeOne from \"memoize-one\";\n\nimport \"../../../../layouts/hass-subpage\";\nimport \"../../../../layouts/hass-loading-screen\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-switch\";\nimport \"../../../../components/entity/state-info\";\n\nimport { HomeAssistant } from \"../../../../types\";\nimport {\n  CloudStatusLoggedIn,\n  CloudPreferences,\n  updateCloudAlexaEntityConfig,\n  AlexaEntityConfig,\n} from \"../../../../data/cloud\";\nimport {\n  generateFilter,\n  isEmptyFilter,\n  EntityFilter,\n} from \"../../../../common/entity/entity_filter\";\nimport { compare } from \"../../../../common/string/compare\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { showDomainTogglerDialog } from \"../../../../dialogs/domain-toggler/show-dialog-domain-toggler\";\nimport { AlexaEntity, fetchCloudAlexaEntities } from \"../../../../data/alexa\";\n// tslint:disable-next-line: no-duplicate-imports\nimport { HaSwitch } from \"../../../../components/ha-switch\";\n\nimport { computeStateName } from \"../../../../common/entity/compute_state_name\";\nimport { computeDomain } from \"../../../../common/entity/compute_domain\";\n\nconst DEFAULT_CONFIG_EXPOSE = true;\nconst IGNORE_INTERFACES = [\"Alexa.EndpointHealth\"];\n\nconst configIsExposed = (config: AlexaEntityConfig) =>\n  config.should_expose === undefined\n    ? DEFAULT_CONFIG_EXPOSE\n    : config.should_expose;\n\n@customElement(\"cloud-alexa\")\nclass CloudAlexa extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property()\n  public cloudStatus!: CloudStatusLoggedIn;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @property() private _entities?: AlexaEntity[];\n\n  @property()\n  private _entityConfigs: CloudPreferences[\"alexa_entity_configs\"] = {};\n  private _popstateSyncAttached = false;\n  private _popstateReloadStatusAttached = false;\n  private _isInitialExposed?: Set<string>;\n\n  private _getEntityFilterFunc = memoizeOne((filter: EntityFilter) =>\n    generateFilter(\n      filter.include_domains,\n      filter.include_entities,\n      filter.exclude_domains,\n      filter.exclude_entities\n    )\n  );\n\n  protected render(): TemplateResult | void {\n    if (this._entities === undefined) {\n      return html`\n        <hass-loading-screen></hass-loading-screen>\n      `;\n    }\n    const emptyFilter = isEmptyFilter(this.cloudStatus.alexa_entities);\n    const filterFunc = this._getEntityFilterFunc(\n      this.cloudStatus.alexa_entities\n    );\n\n    // We will only generate `isInitialExposed` during first render.\n    // On each subsequent render we will use the same set so that cards\n    // will not jump around when we change the exposed setting.\n    const showInExposed = this._isInitialExposed || new Set();\n    const trackExposed = this._isInitialExposed === undefined;\n\n    let selected = 0;\n\n    // On first render we decide which cards show in which category.\n    // That way cards won't jump around when changing values.\n    const exposedCards: TemplateResult[] = [];\n    const notExposedCards: TemplateResult[] = [];\n\n    this._entities.forEach((entity) => {\n      const stateObj = this.hass.states[entity.entity_id];\n      const config = this._entityConfigs[entity.entity_id] || {};\n      const isExposed = emptyFilter\n        ? configIsExposed(config)\n        : filterFunc(entity.entity_id);\n      if (isExposed) {\n        selected++;\n\n        if (trackExposed) {\n          showInExposed.add(entity.entity_id);\n        }\n      }\n\n      const target = showInExposed.has(entity.entity_id)\n        ? exposedCards\n        : notExposedCards;\n\n      target.push(html`\n        <ha-card>\n          <div class=\"card-content\">\n            <state-info\n              .hass=${this.hass}\n              .stateObj=${stateObj}\n              secondary-line\n              @click=${this._showMoreInfo}\n            >\n              ${entity.interfaces\n                .filter((ifc) => !IGNORE_INTERFACES.includes(ifc))\n                .map((ifc) =>\n                  ifc.replace(\"Alexa.\", \"\").replace(\"Controller\", \"\")\n                )\n                .join(\", \")}\n            </state-info>\n            <ha-switch\n              .entityId=${entity.entity_id}\n              .disabled=${!emptyFilter}\n              .checked=${isExposed}\n              @change=${this._exposeChanged}\n            >\n              ${this.hass!.localize(\"ui.panel.config.cloud.alexa.expose\")}\n            </ha-switch>\n          </div>\n        </ha-card>\n      `);\n    });\n\n    if (trackExposed) {\n      this._isInitialExposed = showInExposed;\n    }\n\n    return html`\n      <hass-subpage header=\"${this.hass!.localize(\n        \"ui.panel.config.cloud.alexa.title\"\n      )}\">\n        <span slot=\"toolbar-icon\">\n          ${selected}${\n      !this.narrow\n        ? html`\n            selected\n          `\n        : \"\"\n    }\n        </span>\n        ${\n          emptyFilter\n            ? html`\n                <paper-icon-button\n                  slot=\"toolbar-icon\"\n                  icon=\"hass:tune\"\n                  @click=${this._openDomainToggler}\n                ></paper-icon-button>\n              `\n            : \"\"\n        }\n        ${\n          !emptyFilter\n            ? html`\n                <div class=\"banner\">\n                  ${this.hass!.localize(\"ui.panel.config.cloud.alexa.banner\")}\n                </div>\n              `\n            : \"\"\n        }\n          ${\n            exposedCards.length > 0\n              ? html`\n                  <h1>\n                    ${this.hass!.localize(\n                      \"ui.panel.config.cloud.alexa.exposed_entities\"\n                    )}\n                  </h1>\n                  <div class=\"content\">${exposedCards}</div>\n                `\n              : \"\"\n          }\n          ${\n            notExposedCards.length > 0\n              ? html`\n                  <h1>\n                    ${this.hass!.localize(\n                      \"ui.panel.config.cloud.alexa.not_exposed_entities\"\n                    )}\n                  </h1>\n                  <div class=\"content\">${notExposedCards}</div>\n                `\n              : \"\"\n          }\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    this._fetchData();\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n    if (changedProps.has(\"cloudStatus\")) {\n      this._entityConfigs = this.cloudStatus.prefs.alexa_entity_configs;\n    }\n  }\n\n  private async _fetchData() {\n    const entities = await fetchCloudAlexaEntities(this.hass);\n    entities.sort((a, b) => {\n      const stateA = this.hass.states[a.entity_id];\n      const stateB = this.hass.states[b.entity_id];\n      return compare(\n        stateA ? computeStateName(stateA) : a.entity_id,\n        stateB ? computeStateName(stateB) : b.entity_id\n      );\n    });\n    this._entities = entities;\n  }\n\n  private _showMoreInfo(ev) {\n    const entityId = ev.currentTarget.stateObj.entity_id;\n    fireEvent(this, \"hass-more-info\", { entityId });\n  }\n\n  private async _exposeChanged(ev: Event) {\n    const entityId = (ev.currentTarget as any).entityId;\n    const newExposed = (ev.target as HaSwitch).checked;\n    await this._updateExposed(entityId, newExposed);\n  }\n\n  private async _updateExposed(entityId: string, newExposed: boolean) {\n    const curExposed = configIsExposed(this._entityConfigs[entityId] || {});\n    if (newExposed === curExposed) {\n      return;\n    }\n    await this._updateConfig(entityId, {\n      should_expose: newExposed,\n    });\n    this._ensureEntitySync();\n  }\n\n  private async _updateConfig(entityId: string, values: AlexaEntityConfig) {\n    const updatedConfig = await updateCloudAlexaEntityConfig(\n      this.hass,\n      entityId,\n      values\n    );\n    this._entityConfigs = {\n      ...this._entityConfigs,\n      [entityId]: updatedConfig,\n    };\n    this._ensureStatusReload();\n  }\n\n  private _openDomainToggler() {\n    showDomainTogglerDialog(this, {\n      domains: this._entities!.map((entity) =>\n        computeDomain(entity.entity_id)\n      ).filter((value, idx, self) => self.indexOf(value) === idx),\n      toggleDomain: (domain, turnOn) => {\n        this._entities!.forEach((entity) => {\n          if (computeDomain(entity.entity_id) === domain) {\n            this._updateExposed(entity.entity_id, turnOn);\n          }\n        });\n      },\n    });\n  }\n\n  private _ensureStatusReload() {\n    if (this._popstateReloadStatusAttached) {\n      return;\n    }\n    this._popstateReloadStatusAttached = true;\n    // Cache parent because by the time popstate happens,\n    // this element is detached\n    const parent = this.parentElement!;\n    window.addEventListener(\n      \"popstate\",\n      () => fireEvent(parent, \"ha-refresh-cloud-status\"),\n      { once: true }\n    );\n  }\n\n  private _ensureEntitySync() {\n    if (this._popstateSyncAttached) {\n      return;\n    }\n    this._popstateSyncAttached = true;\n    // Cache parent because by the time popstate happens,\n    // this element is detached\n    // const parent = this.parentElement!;\n    window.addEventListener(\n      \"popstate\",\n      () => {\n        // We don't have anything yet.\n        // showToast(parent, { message: \"Synchronizing changes to Google.\" });\n        // cloudSyncGoogleAssistant(this.hass);\n      },\n      { once: true }\n    );\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      .banner {\n        color: var(--primary-text-color);\n        background-color: var(\n          --ha-card-background,\n          var(--paper-card-background-color, white)\n        );\n        padding: 16px 8px;\n        text-align: center;\n      }\n      h1 {\n        color: var(--primary-text-color);\n        font-size: 24px;\n        letter-spacing: -0.012em;\n        margin-bottom: 0;\n        padding: 0 8px;\n      }\n      .content {\n        display: flex;\n        flex-wrap: wrap;\n        padding: 4px;\n      }\n      ha-switch {\n        clear: both;\n      }\n      ha-card {\n        margin: 4px;\n        width: 100%;\n        max-width: 300px;\n      }\n      .card-content {\n        padding-bottom: 12px;\n      }\n      state-info {\n        cursor: pointer;\n      }\n      ha-switch {\n        padding: 8px 0;\n      }\n\n      @media all and (max-width: 450px) {\n        ha-card {\n          max-width: 100%;\n        }\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"cloud-alexa\": CloudAlexa;\n  }\n}\n"],"sourceRoot":""}