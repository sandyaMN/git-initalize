{"map":"{\"version\":3,\"sources\":[\"/home/sandya/Sandya/workspace/Brandon/home-assistant-polymer/src/panels/config/cloud/alexa/cloud-alexa.ts\"],\"names\":[\"IGNORE_INTERFACES\",\"configIsExposed\",\"config\",\"undefined\",\"should_expose\",\"customElement\",\"CloudAlexa\",\"_LitElement\",\"[object Object]\",\"args\",\"super\",\"_initialize\",\"this\",\"property\",\"type\",\"Boolean\",\"memoizeOne\",\"filter\",\"generateFilter\",\"include_domains\",\"include_entities\",\"exclude_domains\",\"exclude_entities\",\"_entities\",\"html\",\"emptyFilter\",\"isEmptyFilter\",\"cloudStatus\",\"alexa_entities\",\"filterFunc\",\"_getEntityFilterFunc\",\"showInExposed\",\"_isInitialExposed\",\"Set\",\"trackExposed\",\"selected\",\"exposedCards\",\"notExposedCards\",\"forEach\",\"entity\",\"stateObj\",\"hass\",\"states\",\"entity_id\",\"_entityConfigs\",\"isExposed\",\"add\",\"has\",\"push\",\"_showMoreInfo\",\"interfaces\",\"ifc\",\"includes\",\"map\",\"replace\",\"join\",\"_exposeChanged\",\"localize\",\"narrow\",\"_openDomainToggler\",\"length\",\"changedProps\",\"_get\",\"_getPrototypeOf\",\"prototype\",\"call\",\"_fetchData\",\"prefs\",\"alexa_entity_configs\",\"async\",\"entities\",\"fetchCloudAlexaEntities\",\"sort\",\"a\",\"b\",\"stateA\",\"stateB\",\"compare\",\"computeStateName\",\"ev\",\"entityId\",\"currentTarget\",\"fireEvent\",\"newExposed\",\"target\",\"checked\",\"_updateExposed\",\"_updateConfig\",\"_ensureEntitySync\",\"values\",\"updatedConfig\",\"updateCloudAlexaEntityConfig\",\"Object\",\"assign\",\"_ensureStatusReload\",\"showDomainTogglerDialog\",\"domains\",\"computeDomain\",\"value\",\"idx\",\"self\",\"indexOf\",\"toggleDomain\",\"domain\",\"turnOn\",\"_popstateReloadStatusAttached\",\"parent\",\"parentElement\",\"window\",\"addEventListener\",\"once\",\"_popstateSyncAttached\",\"css\",\"LitElement\"],\"mappings\":\"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\",\"sourcesContent\":[\"import {\\n  LitElement,\\n  TemplateResult,\\n  html,\\n  CSSResult,\\n  css,\\n  customElement,\\n  property,\\n} from \\\"lit-element\\\";\\nimport \\\"@polymer/paper-icon-button\\\";\\nimport memoizeOne from \\\"memoize-one\\\";\\n\\nimport \\\"../../../../layouts/hass-subpage\\\";\\nimport \\\"../../../../layouts/hass-loading-screen\\\";\\nimport \\\"../../../../components/ha-card\\\";\\nimport \\\"../../../../components/ha-switch\\\";\\nimport \\\"../../../../components/entity/state-info\\\";\\n\\nimport { HomeAssistant } from \\\"../../../../types\\\";\\nimport {\\n  CloudStatusLoggedIn,\\n  CloudPreferences,\\n  updateCloudAlexaEntityConfig,\\n  AlexaEntityConfig,\\n} from \\\"../../../../data/cloud\\\";\\nimport {\\n  generateFilter,\\n  isEmptyFilter,\\n  EntityFilter,\\n} from \\\"../../../../common/entity/entity_filter\\\";\\nimport { compare } from \\\"../../../../common/string/compare\\\";\\nimport { fireEvent } from \\\"../../../../common/dom/fire_event\\\";\\nimport { showDomainTogglerDialog } from \\\"../../../../dialogs/domain-toggler/show-dialog-domain-toggler\\\";\\nimport { AlexaEntity, fetchCloudAlexaEntities } from \\\"../../../../data/alexa\\\";\\n// tslint:disable-next-line: no-duplicate-imports\\nimport { HaSwitch } from \\\"../../../../components/ha-switch\\\";\\n\\nimport { computeStateName } from \\\"../../../../common/entity/compute_state_name\\\";\\nimport { computeDomain } from \\\"../../../../common/entity/compute_domain\\\";\\n\\nconst DEFAULT_CONFIG_EXPOSE = true;\\nconst IGNORE_INTERFACES = [\\\"Alexa.EndpointHealth\\\"];\\n\\nconst configIsExposed = (config: AlexaEntityConfig) =>\\n  config.should_expose === undefined\\n    ? DEFAULT_CONFIG_EXPOSE\\n    : config.should_expose;\\n\\n@customElement(\\\"cloud-alexa\\\")\\nclass CloudAlexa extends LitElement {\\n  @property() public hass!: HomeAssistant;\\n\\n  @property()\\n  public cloudStatus!: CloudStatusLoggedIn;\\n\\n  @property({ type: Boolean }) public narrow!: boolean;\\n\\n  @property() private _entities?: AlexaEntity[];\\n\\n  @property()\\n  private _entityConfigs: CloudPreferences[\\\"alexa_entity_configs\\\"] = {};\\n  private _popstateSyncAttached = false;\\n  private _popstateReloadStatusAttached = false;\\n  private _isInitialExposed?: Set<string>;\\n\\n  private _getEntityFilterFunc = memoizeOne((filter: EntityFilter) =>\\n    generateFilter(\\n      filter.include_domains,\\n      filter.include_entities,\\n      filter.exclude_domains,\\n      filter.exclude_entities\\n    )\\n  );\\n\\n  protected render(): TemplateResult | void {\\n    if (this._entities === undefined) {\\n      return html`\\n        <hass-loading-screen></hass-loading-screen>\\n      `;\\n    }\\n    const emptyFilter = isEmptyFilter(this.cloudStatus.alexa_entities);\\n    const filterFunc = this._getEntityFilterFunc(\\n      this.cloudStatus.alexa_entities\\n    );\\n\\n    // We will only generate `isInitialExposed` during first render.\\n    // On each subsequent render we will use the same set so that cards\\n    // will not jump around when we change the exposed setting.\\n    const showInExposed = this._isInitialExposed || new Set();\\n    const trackExposed = this._isInitialExposed === undefined;\\n\\n    let selected = 0;\\n\\n    // On first render we decide which cards show in which category.\\n    // That way cards won't jump around when changing values.\\n    const exposedCards: TemplateResult[] = [];\\n    const notExposedCards: TemplateResult[] = [];\\n\\n    this._entities.forEach((entity) => {\\n      const stateObj = this.hass.states[entity.entity_id];\\n      const config = this._entityConfigs[entity.entity_id] || {};\\n      const isExposed = emptyFilter\\n        ? configIsExposed(config)\\n        : filterFunc(entity.entity_id);\\n      if (isExposed) {\\n        selected++;\\n\\n        if (trackExposed) {\\n          showInExposed.add(entity.entity_id);\\n        }\\n      }\\n\\n      const target = showInExposed.has(entity.entity_id)\\n        ? exposedCards\\n        : notExposedCards;\\n\\n      target.push(html`\\n        <ha-card>\\n          <div class=\\\"card-content\\\">\\n            <state-info\\n              .hass=${this.hass}\\n              .stateObj=${stateObj}\\n              secondary-line\\n              @click=${this._showMoreInfo}\\n            >\\n              ${entity.interfaces\\n                .filter((ifc) => !IGNORE_INTERFACES.includes(ifc))\\n                .map((ifc) =>\\n                  ifc.replace(\\\"Alexa.\\\", \\\"\\\").replace(\\\"Controller\\\", \\\"\\\")\\n                )\\n                .join(\\\", \\\")}\\n            </state-info>\\n            <ha-switch\\n              .entityId=${entity.entity_id}\\n              .disabled=${!emptyFilter}\\n              .checked=${isExposed}\\n              @change=${this._exposeChanged}\\n            >\\n              ${this.hass!.localize(\\\"ui.panel.config.cloud.alexa.expose\\\")}\\n            </ha-switch>\\n          </div>\\n        </ha-card>\\n      `);\\n    });\\n\\n    if (trackExposed) {\\n      this._isInitialExposed = showInExposed;\\n    }\\n\\n    return html`\\n      <hass-subpage header=\\\"${this.hass!.localize(\\n        \\\"ui.panel.config.cloud.alexa.title\\\"\\n      )}\\\">\\n        <span slot=\\\"toolbar-icon\\\">\\n          ${selected}${\\n      !this.narrow\\n        ? html`\\n            selected\\n          `\\n        : \\\"\\\"\\n    }\\n        </span>\\n        ${\\n          emptyFilter\\n            ? html`\\n                <paper-icon-button\\n                  slot=\\\"toolbar-icon\\\"\\n                  icon=\\\"hass:tune\\\"\\n                  @click=${this._openDomainToggler}\\n                ></paper-icon-button>\\n              `\\n            : \\\"\\\"\\n        }\\n        ${\\n          !emptyFilter\\n            ? html`\\n                <div class=\\\"banner\\\">\\n                  ${this.hass!.localize(\\\"ui.panel.config.cloud.alexa.banner\\\")}\\n                </div>\\n              `\\n            : \\\"\\\"\\n        }\\n          ${\\n            exposedCards.length > 0\\n              ? html`\\n                  <h1>\\n                    ${this.hass!.localize(\\n                      \\\"ui.panel.config.cloud.alexa.exposed_entities\\\"\\n                    )}\\n                  </h1>\\n                  <div class=\\\"content\\\">${exposedCards}</div>\\n                `\\n              : \\\"\\\"\\n          }\\n          ${\\n            notExposedCards.length > 0\\n              ? html`\\n                  <h1>\\n                    ${this.hass!.localize(\\n                      \\\"ui.panel.config.cloud.alexa.not_exposed_entities\\\"\\n                    )}\\n                  </h1>\\n                  <div class=\\\"content\\\">${notExposedCards}</div>\\n                `\\n              : \\\"\\\"\\n          }\\n        </div>\\n      </hass-subpage>\\n    `;\\n  }\\n\\n  protected firstUpdated(changedProps) {\\n    super.firstUpdated(changedProps);\\n    this._fetchData();\\n  }\\n\\n  protected updated(changedProps) {\\n    super.updated(changedProps);\\n    if (changedProps.has(\\\"cloudStatus\\\")) {\\n      this._entityConfigs = this.cloudStatus.prefs.alexa_entity_configs;\\n    }\\n  }\\n\\n  private async _fetchData() {\\n    const entities = await fetchCloudAlexaEntities(this.hass);\\n    entities.sort((a, b) => {\\n      const stateA = this.hass.states[a.entity_id];\\n      const stateB = this.hass.states[b.entity_id];\\n      return compare(\\n        stateA ? computeStateName(stateA) : a.entity_id,\\n        stateB ? computeStateName(stateB) : b.entity_id\\n      );\\n    });\\n    this._entities = entities;\\n  }\\n\\n  private _showMoreInfo(ev) {\\n    const entityId = ev.currentTarget.stateObj.entity_id;\\n    fireEvent(this, \\\"hass-more-info\\\", { entityId });\\n  }\\n\\n  private async _exposeChanged(ev: Event) {\\n    const entityId = (ev.currentTarget as any).entityId;\\n    const newExposed = (ev.target as HaSwitch).checked;\\n    await this._updateExposed(entityId, newExposed);\\n  }\\n\\n  private async _updateExposed(entityId: string, newExposed: boolean) {\\n    const curExposed = configIsExposed(this._entityConfigs[entityId] || {});\\n    if (newExposed === curExposed) {\\n      return;\\n    }\\n    await this._updateConfig(entityId, {\\n      should_expose: newExposed,\\n    });\\n    this._ensureEntitySync();\\n  }\\n\\n  private async _updateConfig(entityId: string, values: AlexaEntityConfig) {\\n    const updatedConfig = await updateCloudAlexaEntityConfig(\\n      this.hass,\\n      entityId,\\n      values\\n    );\\n    this._entityConfigs = {\\n      ...this._entityConfigs,\\n      [entityId]: updatedConfig,\\n    };\\n    this._ensureStatusReload();\\n  }\\n\\n  private _openDomainToggler() {\\n    showDomainTogglerDialog(this, {\\n      domains: this._entities!.map((entity) =>\\n        computeDomain(entity.entity_id)\\n      ).filter((value, idx, self) => self.indexOf(value) === idx),\\n      toggleDomain: (domain, turnOn) => {\\n        this._entities!.forEach((entity) => {\\n          if (computeDomain(entity.entity_id) === domain) {\\n            this._updateExposed(entity.entity_id, turnOn);\\n          }\\n        });\\n      },\\n    });\\n  }\\n\\n  private _ensureStatusReload() {\\n    if (this._popstateReloadStatusAttached) {\\n      return;\\n    }\\n    this._popstateReloadStatusAttached = true;\\n    // Cache parent because by the time popstate happens,\\n    // this element is detached\\n    const parent = this.parentElement!;\\n    window.addEventListener(\\n      \\\"popstate\\\",\\n      () => fireEvent(parent, \\\"ha-refresh-cloud-status\\\"),\\n      { once: true }\\n    );\\n  }\\n\\n  private _ensureEntitySync() {\\n    if (this._popstateSyncAttached) {\\n      return;\\n    }\\n    this._popstateSyncAttached = true;\\n    // Cache parent because by the time popstate happens,\\n    // this element is detached\\n    // const parent = this.parentElement!;\\n    window.addEventListener(\\n      \\\"popstate\\\",\\n      () => {\\n        // We don't have anything yet.\\n        // showToast(parent, { message: \\\"Synchronizing changes to Google.\\\" });\\n        // cloudSyncGoogleAssistant(this.hass);\\n      },\\n      { once: true }\\n    );\\n  }\\n\\n  static get styles(): CSSResult {\\n    return css`\\n      .banner {\\n        color: var(--primary-text-color);\\n        background-color: var(\\n          --ha-card-background,\\n          var(--paper-card-background-color, white)\\n        );\\n        padding: 16px 8px;\\n        text-align: center;\\n      }\\n      h1 {\\n        color: var(--primary-text-color);\\n        font-size: 24px;\\n        letter-spacing: -0.012em;\\n        margin-bottom: 0;\\n        padding: 0 8px;\\n      }\\n      .content {\\n        display: flex;\\n        flex-wrap: wrap;\\n        padding: 4px;\\n      }\\n      ha-switch {\\n        clear: both;\\n      }\\n      ha-card {\\n        margin: 4px;\\n        width: 100%;\\n        max-width: 300px;\\n      }\\n      .card-content {\\n        padding-bottom: 12px;\\n      }\\n      state-info {\\n        cursor: pointer;\\n      }\\n      ha-switch {\\n        padding: 8px 0;\\n      }\\n\\n      @media all and (max-width: 450px) {\\n        ha-card {\\n          max-width: 100%;\\n        }\\n      }\\n    `;\\n  }\\n}\\n\\ndeclare global {\\n  interface HTMLElementTagNameMap {\\n    \\\"cloud-alexa\\\": CloudAlexa;\\n  }\\n}\\n\"]}","code":"(self.webpackJsonp=self.webpackJsonp||[]).push([[22],{725:function(e,t,i){\"use strict\";i.r(t);var r=i(0),n=(i(105),i(119)),o=(i(148),i(156),i(173),i(195),i(188),i(289)),s=i(504),a=i(199),c=i(14),l=i(505),d=i(502),p=i(172),h=i(116);function u(e){var t,i=g(e.key);\"method\"===e.kind?t={value:e.value,writable:!0,configurable:!0,enumerable:!1}:\"get\"===e.kind?t={get:e.value,configurable:!0,enumerable:!1}:\"set\"===e.kind?t={set:e.value,configurable:!0,enumerable:!1}:\"field\"===e.kind&&(t={configurable:!0,writable:!0,enumerable:!0});var r={kind:\"field\"===e.kind?\"field\":\"method\",key:i,placement:e.static?\"static\":\"field\"===e.kind?\"own\":\"prototype\",descriptor:t};return e.decorators&&(r.decorators=e.decorators),\"field\"===e.kind&&(r.initializer=e.value),r}function f(e,t){void 0!==e.descriptor.get?t.descriptor.get=e.descriptor.get:t.descriptor.set=e.descriptor.set}function y(e){return e.decorators&&e.decorators.length}function m(e){return void 0!==e&&!(void 0===e.value&&void 0===e.writable)}function v(e,t){var i=e[t];if(void 0!==i&&\"function\"!=typeof i)throw new TypeError(\"Expected '\"+t+\"' to be a function\");return i}function g(e){var t=function(e,t){if(\"object\"!=typeof e||null===e)return e;var i=e[Symbol.toPrimitive];if(void 0!==i){var r=i.call(e,t||\"default\");if(\"object\"!=typeof r)return r;throw new TypeError(\"@@toPrimitive must return a primitive value.\")}return(\"string\"===t?String:Number)(e)}(e,\"string\");return\"symbol\"==typeof t?t:String(t)}function k(e,t,i){return(k=\"undefined\"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,i){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=b(e)););return e}(e,t);if(r){var n=Object.getOwnPropertyDescriptor(r,t);return n.get?n.get.call(i):n.value}})(e,t,i||e)}function b(e){return(b=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const w=[\"Alexa.EndpointHealth\"],_=e=>void 0===e.should_expose||e.should_expose;!function(e,t,i,r){var n=function(){var e={elementsDefinitionOrder:[[\"method\"],[\"field\"]],initializeInstanceElements:function(e,t){[\"method\",\"field\"].forEach(function(i){t.forEach(function(t){t.kind===i&&\"own\"===t.placement&&this.defineClassElement(e,t)},this)},this)},initializeClassElements:function(e,t){var i=e.prototype;[\"method\",\"field\"].forEach(function(r){t.forEach(function(t){var n=t.placement;if(t.kind===r&&(\"static\"===n||\"prototype\"===n)){var o=\"static\"===n?e:i;this.defineClassElement(o,t)}},this)},this)},defineClassElement:function(e,t){var i=t.descriptor;if(\"field\"===t.kind){var r=t.initializer;i={enumerable:i.enumerable,writable:i.writable,configurable:i.configurable,value:void 0===r?void 0:r.call(e)}}Object.defineProperty(e,t.key,i)},decorateClass:function(e,t){var i=[],r=[],n={static:[],prototype:[],own:[]};if(e.forEach(function(e){this.addElementPlacement(e,n)},this),e.forEach(function(e){if(!y(e))return i.push(e);var t=this.decorateElement(e,n);i.push(t.element),i.push.apply(i,t.extras),r.push.apply(r,t.finishers)},this),!t)return{elements:i,finishers:r};var o=this.decorateConstructor(i,t);return r.push.apply(r,o.finishers),o.finishers=r,o},addElementPlacement:function(e,t,i){var r=t[e.placement];if(!i&&-1!==r.indexOf(e.key))throw new TypeError(\"Duplicated element (\"+e.key+\")\");r.push(e.key)},decorateElement:function(e,t){for(var i=[],r=[],n=e.decorators,o=n.length-1;o>=0;o--){var s=t[e.placement];s.splice(s.indexOf(e.key),1);var a=this.fromElementDescriptor(e),c=this.toElementFinisherExtras((0,n[o])(a)||a);e=c.element,this.addElementPlacement(e,t),c.finisher&&r.push(c.finisher);var l=c.extras;if(l){for(var d=0;d<l.length;d++)this.addElementPlacement(l[d],t);i.push.apply(i,l)}}return{element:e,finishers:r,extras:i}},decorateConstructor:function(e,t){for(var i=[],r=t.length-1;r>=0;r--){var n=this.fromClassDescriptor(e),o=this.toClassDescriptor((0,t[r])(n)||n);if(void 0!==o.finisher&&i.push(o.finisher),void 0!==o.elements){e=o.elements;for(var s=0;s<e.length-1;s++)for(var a=s+1;a<e.length;a++)if(e[s].key===e[a].key&&e[s].placement===e[a].placement)throw new TypeError(\"Duplicated element (\"+e[s].key+\")\")}}return{elements:e,finishers:i}},fromElementDescriptor:function(e){var t={kind:e.kind,key:e.key,placement:e.placement,descriptor:e.descriptor};return Object.defineProperty(t,Symbol.toStringTag,{value:\"Descriptor\",configurable:!0}),\"field\"===e.kind&&(t.initializer=e.initializer),t},toElementDescriptors:function(e){var t;if(void 0!==e)return(t=e,function(e){if(Array.isArray(e))return e}(t)||function(e){if(Symbol.iterator in Object(e)||\"[object Arguments]\"===Object.prototype.toString.call(e))return Array.from(e)}(t)||function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance\")}()).map(function(e){var t=this.toElementDescriptor(e);return this.disallowProperty(e,\"finisher\",\"An element descriptor\"),this.disallowProperty(e,\"extras\",\"An element descriptor\"),t},this)},toElementDescriptor:function(e){var t=String(e.kind);if(\"method\"!==t&&\"field\"!==t)throw new TypeError('An element descriptor\\'s .kind property must be either \"method\" or \"field\", but a decorator created an element descriptor with .kind \"'+t+'\"');var i=g(e.key),r=String(e.placement);if(\"static\"!==r&&\"prototype\"!==r&&\"own\"!==r)throw new TypeError('An element descriptor\\'s .placement property must be one of \"static\", \"prototype\" or \"own\", but a decorator created an element descriptor with .placement \"'+r+'\"');var n=e.descriptor;this.disallowProperty(e,\"elements\",\"An element descriptor\");var o={kind:t,key:i,placement:r,descriptor:Object.assign({},n)};return\"field\"!==t?this.disallowProperty(e,\"initializer\",\"A method descriptor\"):(this.disallowProperty(n,\"get\",\"The property descriptor of a field descriptor\"),this.disallowProperty(n,\"set\",\"The property descriptor of a field descriptor\"),this.disallowProperty(n,\"value\",\"The property descriptor of a field descriptor\"),o.initializer=e.initializer),o},toElementFinisherExtras:function(e){var t=this.toElementDescriptor(e),i=v(e,\"finisher\"),r=this.toElementDescriptors(e.extras);return{element:t,finisher:i,extras:r}},fromClassDescriptor:function(e){var t={kind:\"class\",elements:e.map(this.fromElementDescriptor,this)};return Object.defineProperty(t,Symbol.toStringTag,{value:\"Descriptor\",configurable:!0}),t},toClassDescriptor:function(e){var t=String(e.kind);if(\"class\"!==t)throw new TypeError('A class descriptor\\'s .kind property must be \"class\", but a decorator created a class descriptor with .kind \"'+t+'\"');this.disallowProperty(e,\"key\",\"A class descriptor\"),this.disallowProperty(e,\"placement\",\"A class descriptor\"),this.disallowProperty(e,\"descriptor\",\"A class descriptor\"),this.disallowProperty(e,\"initializer\",\"A class descriptor\"),this.disallowProperty(e,\"extras\",\"A class descriptor\");var i=v(e,\"finisher\"),r=this.toElementDescriptors(e.elements);return{elements:r,finisher:i}},runClassFinishers:function(e,t){for(var i=0;i<t.length;i++){var r=(0,t[i])(e);if(void 0!==r){if(\"function\"!=typeof r)throw new TypeError(\"Finishers must return a constructor.\");e=r}}return e},disallowProperty:function(e,t,i){if(void 0!==e[t])throw new TypeError(i+\" can't have a .\"+t+\" property.\")}};return e}();if(r)for(var o=0;o<r.length;o++)n=r[o](n);var s=t(function(e){n.initializeInstanceElements(e,a.elements)},i),a=n.decorateClass(function(e){for(var t=[],i=function(e){return\"method\"===e.kind&&e.key===o.key&&e.placement===o.placement},r=0;r<e.length;r++){var n,o=e[r];if(\"method\"===o.kind&&(n=t.find(i)))if(m(o.descriptor)||m(n.descriptor)){if(y(o)||y(n))throw new ReferenceError(\"Duplicated methods (\"+o.key+\") can't be decorated.\");n.descriptor=o.descriptor}else{if(y(o)){if(y(n))throw new ReferenceError(\"Decorators can't be placed on different accessors with for the same property (\"+o.key+\").\");n.decorators=o.decorators}f(o,n)}else t.push(o)}return t}(s.d.map(u)),e);n.initializeClassElements(s.F,a.elements),n.runClassFinishers(s.F,a.finishers)}([Object(r.d)(\"cloud-alexa\")],function(e,t){class i extends t{constructor(...t){super(...t),e(this)}}return{F:i,d:[{kind:\"field\",decorators:[Object(r.g)()],key:\"hass\",value:void 0},{kind:\"field\",decorators:[Object(r.g)()],key:\"cloudStatus\",value:void 0},{kind:\"field\",decorators:[Object(r.g)({type:Boolean})],key:\"narrow\",value:void 0},{kind:\"field\",decorators:[Object(r.g)()],key:\"_entities\",value:void 0},{kind:\"field\",decorators:[Object(r.g)()],key:\"_entityConfigs\",value:()=>({})},{kind:\"field\",key:\"_popstateSyncAttached\",value:()=>!1},{kind:\"field\",key:\"_popstateReloadStatusAttached\",value:()=>!1},{kind:\"field\",key:\"_isInitialExposed\",value:void 0},{kind:\"field\",key:\"_getEntityFilterFunc\",value:()=>Object(n.a)(e=>Object(s.a)(e.include_domains,e.include_entities,e.exclude_domains,e.exclude_entities))},{kind:\"method\",key:\"render\",value:function(){if(void 0===this._entities)return r.f`\n        <hass-loading-screen></hass-loading-screen>\n      `;const e=Object(s.b)(this.cloudStatus.alexa_entities),t=this._getEntityFilterFunc(this.cloudStatus.alexa_entities),i=this._isInitialExposed||new Set,n=void 0===this._isInitialExposed;let o=0;const a=[],c=[];return this._entities.forEach(s=>{const l=this.hass.states[s.entity_id],d=this._entityConfigs[s.entity_id]||{},p=e?_(d):t(s.entity_id);p&&(o++,n&&i.add(s.entity_id)),(i.has(s.entity_id)?a:c).push(r.f`\n        <ha-card>\n          <div class=\"card-content\">\n            <state-info\n              .hass=${this.hass}\n              .stateObj=${l}\n              secondary-line\n              @click=${this._showMoreInfo}\n            >\n              ${s.interfaces.filter(e=>!w.includes(e)).map(e=>e.replace(\"Alexa.\",\"\").replace(\"Controller\",\"\")).join(\", \")}\n            </state-info>\n            <ha-switch\n              .entityId=${s.entity_id}\n              .disabled=${!e}\n              .checked=${p}\n              @change=${this._exposeChanged}\n            >\n              ${this.hass.localize(\"ui.panel.config.cloud.alexa.expose\")}\n            </ha-switch>\n          </div>\n        </ha-card>\n      `)}),n&&(this._isInitialExposed=i),r.f`\n      <hass-subpage header=\"${this.hass.localize(\"ui.panel.config.cloud.alexa.title\")}\">\n        <span slot=\"toolbar-icon\">\n          ${o}${this.narrow?\"\":r.f`\n            selected\n          `}\n        </span>\n        ${e?r.f`\n                <paper-icon-button\n                  slot=\"toolbar-icon\"\n                  icon=\"hass:tune\"\n                  @click=${this._openDomainToggler}\n                ></paper-icon-button>\n              `:\"\"}\n        ${e?\"\":r.f`\n                <div class=\"banner\">\n                  ${this.hass.localize(\"ui.panel.config.cloud.alexa.banner\")}\n                </div>\n              `}\n          ${a.length>0?r.f`\n                  <h1>\n                    ${this.hass.localize(\"ui.panel.config.cloud.alexa.exposed_entities\")}\n                  </h1>\n                  <div class=\"content\">${a}</div>\n                `:\"\"}\n          ${c.length>0?r.f`\n                  <h1>\n                    ${this.hass.localize(\"ui.panel.config.cloud.alexa.not_exposed_entities\")}\n                  </h1>\n                  <div class=\"content\">${c}</div>\n                `:\"\"}\n        </div>\n      </hass-subpage>\n    `}},{kind:\"method\",key:\"firstUpdated\",value:function(e){k(b(i.prototype),\"firstUpdated\",this).call(this,e),this._fetchData()}},{kind:\"method\",key:\"updated\",value:function(e){k(b(i.prototype),\"updated\",this).call(this,e),e.has(\"cloudStatus\")&&(this._entityConfigs=this.cloudStatus.prefs.alexa_entity_configs)}},{kind:\"method\",key:\"_fetchData\",value:async function(){const e=await Object(d.a)(this.hass);e.sort((e,t)=>{const i=this.hass.states[e.entity_id],r=this.hass.states[t.entity_id];return Object(a.b)(i?Object(p.a)(i):e.entity_id,r?Object(p.a)(r):t.entity_id)}),this._entities=e}},{kind:\"method\",key:\"_showMoreInfo\",value:function(e){const t=e.currentTarget.stateObj.entity_id;Object(c.a)(this,\"hass-more-info\",{entityId:t})}},{kind:\"method\",key:\"_exposeChanged\",value:async function(e){const t=e.currentTarget.entityId,i=e.target.checked;await this._updateExposed(t,i)}},{kind:\"method\",key:\"_updateExposed\",value:async function(e,t){t!==_(this._entityConfigs[e]||{})&&(await this._updateConfig(e,{should_expose:t}),this._ensureEntitySync())}},{kind:\"method\",key:\"_updateConfig\",value:async function(e,t){const i=await Object(o.i)(this.hass,e,t);this._entityConfigs=Object.assign({},this._entityConfigs,{[e]:i}),this._ensureStatusReload()}},{kind:\"method\",key:\"_openDomainToggler\",value:function(){Object(l.a)(this,{domains:this._entities.map(e=>Object(h.a)(e.entity_id)).filter((e,t,i)=>i.indexOf(e)===t),toggleDomain:(e,t)=>{this._entities.forEach(i=>{Object(h.a)(i.entity_id)===e&&this._updateExposed(i.entity_id,t)})}})}},{kind:\"method\",key:\"_ensureStatusReload\",value:function(){if(this._popstateReloadStatusAttached)return;this._popstateReloadStatusAttached=!0;const e=this.parentElement;window.addEventListener(\"popstate\",()=>Object(c.a)(e,\"ha-refresh-cloud-status\"),{once:!0})}},{kind:\"method\",key:\"_ensureEntitySync\",value:function(){this._popstateSyncAttached||(this._popstateSyncAttached=!0,window.addEventListener(\"popstate\",()=>{},{once:!0}))}},{kind:\"get\",static:!0,key:\"styles\",value:function(){return r.c`\n      .banner {\n        color: var(--primary-text-color);\n        background-color: var(\n          --ha-card-background,\n          var(--paper-card-background-color, white)\n        );\n        padding: 16px 8px;\n        text-align: center;\n      }\n      h1 {\n        color: var(--primary-text-color);\n        font-size: 24px;\n        letter-spacing: -0.012em;\n        margin-bottom: 0;\n        padding: 0 8px;\n      }\n      .content {\n        display: flex;\n        flex-wrap: wrap;\n        padding: 4px;\n      }\n      ha-switch {\n        clear: both;\n      }\n      ha-card {\n        margin: 4px;\n        width: 100%;\n        max-width: 300px;\n      }\n      .card-content {\n        padding-bottom: 12px;\n      }\n      state-info {\n        cursor: pointer;\n      }\n      ha-switch {\n        padding: 8px 0;\n      }\n\n      @media all and (max-width: 450px) {\n        ha-card {\n          max-width: 100%;\n        }\n      }\n    `}}]}},r.a)}}]);","extractedComments":[]}